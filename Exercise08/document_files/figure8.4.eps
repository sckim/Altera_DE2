%!PS-Adobe-3.0 EPSF-3.0
%%Title: (figure8.4.fm)
%%Version: 1 4
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 14:40:56 04/04/06
%%For: (sbrown)
%%DocumentData: Clean7Bit
%%BoundingBox: 116 385 411 662
%%HiResBoundingBox: 116.0 385.0 411.47998 661.560059
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L1 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr SEPS ttf hb Printer/PostScript Color Management 0
%%BeginResource: file Pscript_T42Hdr PSVER
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.18 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.18 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset l2compat 6.0 1
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
cvi
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset sep_ops 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/undefineRes {
null exch
defineRes
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource TimesNewRomanPSMT
[/N19/TimesNewRomanPSMT 1 TZ
%%IncludeResource TimesNewRomanPS-ItalicMT
[/N20/TimesNewRomanPS-ItalicMT 1 TZ

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 1171 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:80d4a2b2-4658-484d-9c1d-1d8fb3512a73' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Acrobat Distiller 6.0 (Windows)'></rdf:Description>
<rdf:Description rdf:about='uuid:80d4a2b2-4658-484d-9c1d-1d8fb3512a73' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:CreatorTool='FrameMaker 7.0' xap:ModifyDate='2006-04-04T14:39:27Z' xap:CreateDate='1997-04-11T18:09:45Z'></rdf:Description>
<rdf:Description rdf:about='uuid:80d4a2b2-4658-484d-9c1d-1d8fb3512a73' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:4b47dd20-440a-468b-b84c-ff68cd1102ee'/>
<rdf:Description rdf:about='uuid:80d4a2b2-4658-484d-9c1d-1d8fb3512a73' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>figure8.4.fm</rdf:li></rdf:Alt></dc:title><dc:creator><rdf:Seq><rdf:li>sbrown</rdf:li></rdf:Seq></dc:creator></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
116 385 295 277 rectclip
/N17 [/DeviceRGB] /ColorSpace defineRes pop

116.0 385.0 295.47998 276.560059 re
W
n
n
162.0 611.700012 m
161.940002 611.940002 l
161.759995 612.179993 l
161.519989 612.359985 l
161.220001 612.419983 l
160.979996 612.359985 l
160.73999 612.179993 l
160.559998 611.940002 l
160.5 611.700012 l
160.559998 611.400024 l
160.73999 611.159973 l
160.979996 610.97998 l
161.220001 610.919983 l
161.519989 610.97998 l
161.759995 611.159973 l
161.940002 611.400024 l
162.0 611.700012 l
0.0 1.0 1.0 setrgbcolor
f
n
208.979996 611.700012 m
208.919998 611.940002 l
208.73999 612.179993 l
208.5 612.359985 l
208.199997 612.419983 l
207.959991 612.359985 l
207.720001 612.179993 l
207.539993 611.940002 l
207.479996 611.700012 l
207.539993 611.400024 l
207.720001 611.159973 l
207.959991 610.97998 l
208.199997 610.919983 l
208.5 610.97998 l
208.73999 611.159973 l
208.919998 611.400024 l
208.979996 611.700012 l
f
n
161.220001 610.919983 46.979996 1.5 re
f
n
223.319992 611.700012 m
223.259995 611.940002 l
223.080002 612.179993 l
222.839996 612.359985 l
222.539993 612.419983 l
222.300003 612.359985 l
222.059998 612.179993 l
221.87999 611.940002 l
221.819992 611.700012 l
221.87999 611.400024 l
222.059998 611.159973 l
222.300003 610.97998 l
222.539993 610.919983 l
222.839996 610.97998 l
223.080002 611.159973 l
223.259995 611.400024 l
223.319992 611.700012 l
f
n
333.0 611.700012 m
332.940002 611.940002 l
332.759979 612.179993 l
332.519989 612.359985 l
332.220001 612.419983 l
331.97998 612.359985 l
331.73999 612.179993 l
331.559998 611.940002 l
331.5 611.700012 l
331.559998 611.400024 l
331.73999 611.159973 l
331.97998 610.97998 l
332.220001 610.919983 l
332.519989 610.97998 l
332.759979 611.159973 l
332.940002 611.400024 l
333.0 611.700012 l
f
n
222.539993 610.919983 109.680008 1.5 re
f
n
162.0 625.859985 m
161.940002 626.100037 l
161.759995 626.339966 l
161.519989 626.519958 l
161.220001 626.579956 l
160.979996 626.519958 l
160.73999 626.339966 l
160.559998 626.100037 l
160.5 625.859985 l
160.559998 625.559998 l
160.73999 625.320007 l
160.979996 625.140015 l
161.220001 625.079956 l
161.519989 625.140015 l
161.759995 625.320007 l
161.940002 625.559998 l
162.0 625.859985 l
f
n
208.979996 625.859985 m
208.919998 626.100037 l
208.73999 626.339966 l
208.5 626.519958 l
208.199997 626.579956 l
207.959991 626.519958 l
207.720001 626.339966 l
207.539993 626.100037 l
207.479996 625.859985 l
207.539993 625.559998 l
207.720001 625.320007 l
207.959991 625.140015 l
208.199997 625.079956 l
208.5 625.140015 l
208.73999 625.320007 l
208.919998 625.559998 l
208.979996 625.859985 l
f
n
161.220001 625.079956 46.979996 1.5 re
f
n
347.339996 611.700012 m
347.279999 611.940002 l
347.100006 612.179993 l
346.859985 612.359985 l
346.559998 612.419983 l
346.320007 612.359985 l
346.079987 612.179993 l
345.899994 611.940002 l
345.839996 611.700012 l
345.899994 611.400024 l
346.079987 611.159973 l
346.320007 610.97998 l
346.559998 610.919983 l
346.859985 610.97998 l
347.100006 611.159973 l
347.279999 611.400024 l
347.339996 611.700012 l
f
n
395.459991 611.700012 m
395.399994 611.940002 l
395.220001 612.179993 l
394.97998 612.359985 l
394.679993 612.419983 l
394.440002 612.359985 l
394.200012 612.179993 l
394.019989 611.940002 l
393.959991 611.700012 l
394.019989 611.400024 l
394.200012 611.159973 l
394.440002 610.97998 l
394.679993 610.919983 l
394.97998 610.97998 l
395.220001 611.159973 l
395.399994 611.400024 l
395.459991 611.700012 l
f
n
346.559998 610.919983 48.119995 1.5 re
f
n
208.979996 625.859985 m
208.919998 626.100037 l
208.73999 626.339966 l
208.5 626.519958 l
208.199997 626.579956 l
207.959991 626.519958 l
207.720001 626.339966 l
207.539993 626.100037 l
207.479996 625.859985 l
207.539993 625.559998 l
207.720001 625.320007 l
207.959991 625.140015 l
208.199997 625.079956 l
208.5 625.140015 l
208.73999 625.320007 l
208.919998 625.559998 l
208.979996 625.859985 l
f
n
223.319992 611.519958 m
223.259995 611.76001 l
223.080002 612.0 l
222.839996 612.179993 l
222.539993 612.23999 l
222.300003 612.179993 l
222.059998 612.0 l
221.87999 611.76001 l
221.819992 611.519958 l
221.87999 611.219971 l
222.059998 610.97998 l
222.300003 610.799988 l
222.539993 610.73999 l
222.839996 610.799988 l
223.080002 610.97998 l
223.259995 611.219971 l
223.319992 611.519958 l
f
n
208.73999 626.400024 m
207.659988 625.320007 l
222.0 610.97998 l
223.080002 612.059998 l
f
n
208.979996 611.700012 m
208.919998 611.940002 l
208.73999 612.179993 l
208.5 612.359985 l
208.199997 612.419983 l
207.959991 612.359985 l
207.720001 612.179993 l
207.539993 611.940002 l
207.479996 611.700012 l
207.539993 611.400024 l
207.720001 611.159973 l
207.959991 610.97998 l
208.199997 610.919983 l
208.5 610.97998 l
208.73999 611.159973 l
208.919998 611.400024 l
208.979996 611.700012 l
f
n
223.319992 626.039978 m
223.259995 626.279968 l
223.080002 626.519958 l
222.839996 626.700012 l
222.539993 626.76001 l
222.300003 626.700012 l
222.059998 626.519958 l
221.87999 626.279968 l
221.819992 626.039978 l
221.87999 625.73999 l
222.059998 625.5 l
222.300003 625.320007 l
222.539993 625.26001 l
222.839996 625.320007 l
223.080002 625.5 l
223.259995 625.73999 l
223.319992 626.039978 l
f
n
207.659988 612.23999 m
208.73999 611.159973 l
223.080002 625.5 l
222.0 626.579956 l
f
n
223.319992 625.859985 m
223.259995 626.100037 l
223.080002 626.339966 l
222.839996 626.519958 l
222.539993 626.579956 l
222.300003 626.519958 l
222.059998 626.339966 l
221.87999 626.100037 l
221.819992 625.859985 l
221.87999 625.559998 l
222.059998 625.320007 l
222.300003 625.140015 l
222.539993 625.079956 l
222.839996 625.140015 l
223.080002 625.320007 l
223.259995 625.559998 l
223.319992 625.859985 l
f
n
333.0 625.859985 m
332.940002 626.100037 l
332.759979 626.339966 l
332.519989 626.519958 l
332.220001 626.579956 l
331.97998 626.519958 l
331.73999 626.339966 l
331.559998 626.100037 l
331.5 625.859985 l
331.559998 625.559998 l
331.73999 625.320007 l
331.97998 625.140015 l
332.220001 625.079956 l
332.519989 625.140015 l
332.759979 625.320007 l
332.940002 625.559998 l
333.0 625.859985 l
f
n
222.539993 625.079956 109.680008 1.5 re
f
n
347.339996 625.859985 m
347.279999 626.100037 l
347.100006 626.339966 l
346.859985 626.519958 l
346.559998 626.579956 l
346.320007 626.519958 l
346.079987 626.339966 l
345.899994 626.100037 l
345.839996 625.859985 l
345.899994 625.559998 l
346.079987 625.320007 l
346.320007 625.140015 l
346.559998 625.079956 l
346.859985 625.140015 l
347.100006 625.320007 l
347.279999 625.559998 l
347.339996 625.859985 l
f
n
395.459991 625.859985 m
395.399994 626.100037 l
395.220001 626.339966 l
394.97998 626.519958 l
394.679993 626.579956 l
394.440002 626.519958 l
394.200012 626.339966 l
394.019989 626.100037 l
393.959991 625.859985 l
394.019989 625.559998 l
394.200012 625.320007 l
394.440002 625.140015 l
394.679993 625.079956 l
394.97998 625.140015 l
395.220001 625.320007 l
395.399994 625.559998 l
395.459991 625.859985 l
f
n
346.559998 625.079956 48.119995 1.5 re
f
n
162.0 584.940002 m
161.940002 585.179993 l
161.759995 585.419983 l
161.519989 585.600037 l
161.220001 585.659973 l
160.979996 585.600037 l
160.73999 585.419983 l
160.559998 585.179993 l
160.5 584.940002 l
160.559998 584.640015 l
160.73999 584.400024 l
160.979996 584.219971 l
161.220001 584.159973 l
161.519989 584.219971 l
161.759995 584.400024 l
161.940002 584.640015 l
162.0 584.940002 l
f
n
231.479996 584.940002 m
231.419998 585.179993 l
231.23999 585.419983 l
231.0 585.600037 l
230.699997 585.659973 l
230.459991 585.600037 l
230.220001 585.419983 l
230.039993 585.179993 l
229.979996 584.940002 l
230.039993 584.640015 l
230.220001 584.400024 l
230.459991 584.219971 l
230.699997 584.159973 l
231.0 584.219971 l
231.23999 584.400024 l
231.419998 584.640015 l
231.479996 584.940002 l
f
n
161.220001 584.159973 69.479996 1.5 re
f
n
162.0 599.100037 m
161.940002 599.339966 l
161.759995 599.580017 l
161.519989 599.76001 l
161.220001 599.820007 l
160.979996 599.76001 l
160.73999 599.580017 l
160.559998 599.339966 l
160.5 599.100037 l
160.559998 598.799988 l
160.73999 598.559998 l
160.979996 598.380005 l
161.220001 598.320007 l
161.519989 598.380005 l
161.759995 598.559998 l
161.940002 598.799988 l
162.0 599.100037 l
f
n
231.479996 599.100037 m
231.419998 599.339966 l
231.23999 599.580017 l
231.0 599.76001 l
230.699997 599.820007 l
230.459991 599.76001 l
230.220001 599.580017 l
230.039993 599.339966 l
229.979996 599.100037 l
230.039993 598.799988 l
230.220001 598.559998 l
230.459991 598.380005 l
230.699997 598.320007 l
231.0 598.380005 l
231.23999 598.559998 l
231.419998 598.799988 l
231.479996 599.100037 l
f
n
161.220001 598.320007 69.479996 1.5 re
f
n
298.619995 599.279968 m
298.559998 599.519958 l
298.380005 599.76001 l
298.139984 599.940002 l
297.839996 600.0 l
297.600006 599.940002 l
297.359985 599.76001 l
297.179993 599.519958 l
297.119995 599.279968 l
297.179993 598.97998 l
297.359985 598.73999 l
297.600006 598.559998 l
297.839996 598.5 l
298.139984 598.559998 l
298.380005 598.73999 l
298.559998 598.97998 l
298.619995 599.279968 l
f
n
355.139984 599.279968 m
355.079987 599.519958 l
354.899994 599.76001 l
354.660004 599.940002 l
354.359985 600.0 l
354.119995 599.940002 l
353.880005 599.76001 l
353.700012 599.519958 l
353.639984 599.279968 l
353.700012 598.97998 l
353.880005 598.73999 l
354.119995 598.559998 l
354.359985 598.5 l
354.660004 598.559998 l
354.899994 598.73999 l
355.079987 598.97998 l
355.139984 599.279968 l
f
n
297.839996 598.5 56.519989 1.5 re
f
n
298.619995 584.940002 m
298.559998 585.179993 l
298.380005 585.419983 l
298.139984 585.600037 l
297.839996 585.659973 l
297.600006 585.600037 l
297.359985 585.419983 l
297.179993 585.179993 l
297.119995 584.940002 l
297.179993 584.640015 l
297.359985 584.400024 l
297.600006 584.219971 l
297.839996 584.159973 l
298.139984 584.219971 l
298.380005 584.400024 l
298.559998 584.640015 l
298.619995 584.940002 l
f
n
355.5 584.940002 m
355.440002 585.179993 l
355.259979 585.419983 l
355.019989 585.600037 l
354.720001 585.659973 l
354.47998 585.600037 l
354.23999 585.419983 l
354.059998 585.179993 l
354.0 584.940002 l
354.059998 584.640015 l
354.23999 584.400024 l
354.47998 584.219971 l
354.720001 584.159973 l
355.019989 584.219971 l
355.259979 584.400024 l
355.440002 584.640015 l
355.5 584.940002 l
f
n
297.839996 584.159973 56.880005 1.5 re
f
0.0 sg
309.059998 589.380005 m
/N19 9.0 Tf
(Data out )
[6.495301 3.993302 2.499299 3.993302 2.2203 4.4973 4.4973 2.499299 2.2203 ] pdfxs
227.639709 616.080322 m
(Address in)
[6.483601 4.4856 4.4856 2.982533 3.981602 3.486668 3.486668 2.2797 2.487599 4.4856 ] pdfxs
n
333.0 625.859985 m
332.940002 626.100037 l
332.759979 626.339966 l
332.519989 626.519958 l
332.220001 626.579956 l
331.97998 626.519958 l
331.73999 626.339966 l
331.559998 626.100037 l
331.5 625.859985 l
331.559998 625.559998 l
331.73999 625.320007 l
331.97998 625.140015 l
332.220001 625.079956 l
332.519989 625.140015 l
332.759979 625.320007 l
332.940002 625.559998 l
333.0 625.859985 l
0.0 1.0 1.0 setrgbcolor
f
n
347.339996 611.519958 m
347.279999 611.76001 l
347.100006 612.0 l
346.859985 612.179993 l
346.559998 612.23999 l
346.320007 612.179993 l
346.079987 612.0 l
345.899994 611.76001 l
345.839996 611.519958 l
345.899994 611.219971 l
346.079987 610.97998 l
346.320007 610.799988 l
346.559998 610.73999 l
346.859985 610.799988 l
347.100006 610.97998 l
347.279999 611.219971 l
347.339996 611.519958 l
f
n
332.759979 626.400024 m
331.679993 625.320007 l
346.019989 610.97998 l
347.100006 612.059998 l
f
n
333.0 611.700012 m
332.940002 611.940002 l
332.759979 612.179993 l
332.519989 612.359985 l
332.220001 612.419983 l
331.97998 612.359985 l
331.73999 612.179993 l
331.559998 611.940002 l
331.5 611.700012 l
331.559998 611.400024 l
331.73999 611.159973 l
331.97998 610.97998 l
332.220001 610.919983 l
332.519989 610.97998 l
332.759979 611.159973 l
332.940002 611.400024 l
333.0 611.700012 l
f
n
347.339996 626.039978 m
347.279999 626.279968 l
347.100006 626.519958 l
346.859985 626.700012 l
346.559998 626.76001 l
346.320007 626.700012 l
346.079987 626.519958 l
345.899994 626.279968 l
345.839996 626.039978 l
345.899994 625.73999 l
346.079987 625.5 l
346.320007 625.320007 l
346.559998 625.26001 l
346.859985 625.320007 l
347.100006 625.5 l
347.279999 625.73999 l
347.339996 626.039978 l
f
n
331.679993 612.23999 m
332.759979 611.159973 l
347.100006 625.5 l
346.019989 626.579956 l
f
n
283.440002 650.640015 m
283.440002 652.73999 l
284.100006 652.559998 l
289.019989 651.119995 l
290.759979 650.640015 l
289.019989 650.159973 l
284.100006 648.779968 l
283.440002 648.600037 l
283.440002 649.26001 l
283.800018 649.73999 l
288.720001 651.119995 l
289.019989 650.159973 l
288.720001 650.159973 l
283.800018 651.600037 l
284.100006 652.559998 l
284.459991 652.079956 l
284.459991 650.640015 l
0.0 sg
f
n
283.950012 649.26001 m
283.950012 650.640015 l
1.020004 w
S
1.0 w
n
283.919983 650.640015 m
283.919983 652.079956 l
288.839996 650.640015 l
283.919983 649.26001 l
eofill
n
263.459991 650.610046 m
283.440002 650.610046 l
1.020004 w
S
1.0 w
n
222.600006 650.640015 m
222.600006 648.600037 l
221.940002 648.779968 l
217.019989 650.159973 l
215.400009 650.640015 l
217.019989 651.119995 l
221.940002 652.559998 l
222.600006 652.73999 l
222.600006 652.079956 l
222.23999 651.600037 l
217.319992 650.159973 l
217.019989 651.119995 l
217.319992 651.119995 l
222.23999 649.73999 l
221.940002 648.779968 l
221.580002 649.26001 l
221.580002 650.640015 l
f
n
222.089996 650.640015 m
222.089996 652.080078 l
1.020004 w
S
1.0 w
n
222.119995 650.640015 m
222.119995 649.26001 l
217.199997 650.640015 l
222.119995 652.079956 l
eofill
n
222.600006 650.610046 m
242.820007 650.610046 l
1.020004 w
S
1.0 w
247.979996 649.620056 m
/N20 9.0 Tf
(t) show
250.800003 646.680054 m
/N20 6.960007 Tf
(AA)
[4.80096 4.80096 ] pdfxs
n
354.720001 650.640015 m
354.720001 652.73999 l
355.380005 652.559998 l
360.23999 651.119995 l
361.919983 650.640015 l
360.23999 650.159973 l
355.380005 648.779968 l
354.720001 648.600037 l
354.720001 649.26001 l
355.079987 649.73999 l
359.940002 651.119995 l
360.23999 650.159973 l
359.940002 650.159973 l
355.079987 651.600037 l
355.380005 652.559998 l
355.73999 652.079956 l
355.73999 650.640015 l
f
n
355.230011 649.26001 m
355.230011 650.640015 l
1.020004 w
S
1.0 w
n
355.200012 650.640015 m
355.200012 652.079956 l
360.059998 650.640015 l
355.200012 649.26001 l
eofill
n
346.559998 650.640015 m
346.559998 648.600037 l
345.899994 648.779968 l
341.039978 650.159973 l
339.419983 650.640015 l
341.039978 651.119995 l
345.899994 652.559998 l
346.559998 652.73999 l
346.559998 652.079956 l
346.200012 651.600037 l
341.339996 650.159973 l
341.039978 651.119995 l
341.339996 651.119995 l
346.200012 649.73999 l
345.899994 648.779968 l
345.539978 649.26001 l
345.539978 650.640015 l
f
n
346.049988 650.640015 m
346.049988 652.080078 l
1.020004 w
S
1.0 w
n
346.079987 650.640015 m
346.079987 649.26001 l
341.220001 650.640015 l
346.079987 652.079956 l
eofill
n
346.619995 650.610046 m
354.659973 650.610046 l
1.020004 w
S
1.0 w
364.800018 647.339966 m
/N20 9.0 Tf
(t) show
367.619995 644.459961 m
/N20 6.960007 Tf
(OHA)
[5.579142 5.579142 4.806528 ] pdfxs
n
237.959991 592.019958 m
237.900009 592.26001 l
237.720001 592.5 l
237.479996 592.679993 l
237.179993 592.73999 l
236.939987 592.679993 l
236.699997 592.5 l
236.519989 592.26001 l
236.459991 592.019958 l
236.519989 591.719971 l
236.699997 591.47998 l
236.939987 591.299988 l
237.179993 591.23999 l
237.479996 591.299988 l
237.720001 591.47998 l
237.900009 591.719971 l
237.959991 592.019958 l
0.0 1.0 1.0 setrgbcolor
f
n
291.419983 592.019958 m
291.359985 592.26001 l
291.179993 592.5 l
290.940002 592.679993 l
290.639984 592.73999 l
290.399994 592.679993 l
290.160004 592.5 l
289.97998 592.26001 l
289.919983 592.019958 l
289.97998 591.719971 l
290.160004 591.47998 l
290.399994 591.299988 l
290.639984 591.23999 l
290.940002 591.299988 l
291.179993 591.47998 l
291.359985 591.719971 l
291.419983 592.019958 l
f
n
237.179993 591.23999 53.459991 1.5 re
f
n
298.619995 599.279968 m
298.559998 599.519958 l
298.380005 599.76001 l
298.139984 599.940002 l
297.839996 600.0 l
297.600006 599.940002 l
297.359985 599.76001 l
297.179993 599.519958 l
297.119995 599.279968 l
297.179993 598.97998 l
297.359985 598.73999 l
297.600006 598.559998 l
297.839996 598.5 l
298.139984 598.559998 l
298.380005 598.73999 l
298.559998 598.97998 l
298.619995 599.279968 l
f
n
291.0 591.719971 m
290.940002 591.959961 l
290.759979 592.200012 l
290.519989 592.380005 l
290.220001 592.440002 l
289.97998 592.380005 l
289.73999 592.200012 l
289.559998 591.959961 l
289.5 591.719971 l
289.559998 591.419983 l
289.73999 591.179993 l
289.97998 591.0 l
290.220001 590.940002 l
290.519989 591.0 l
290.759979 591.179993 l
290.940002 591.419983 l
291.0 591.719971 l
f
n
298.380005 598.73999 m
297.300018 599.820007 l
289.679993 592.26001 l
290.759979 591.179993 l
f
n
298.619995 584.940002 m
298.559998 585.179993 l
298.380005 585.419983 l
298.139984 585.600037 l
297.839996 585.659973 l
297.600006 585.600037 l
297.359985 585.419983 l
297.179993 585.179993 l
297.119995 584.940002 l
297.179993 584.640015 l
297.359985 584.400024 l
297.600006 584.219971 l
297.839996 584.159973 l
298.139984 584.219971 l
298.380005 584.400024 l
298.559998 584.640015 l
298.619995 584.940002 l
f
n
291.359985 592.140015 m
291.300018 592.380005 l
291.119995 592.619995 l
290.880005 592.799988 l
290.579987 592.859985 l
290.339996 592.799988 l
290.100006 592.619995 l
289.919983 592.380005 l
289.859985 592.140015 l
289.919983 591.839966 l
290.100006 591.600037 l
290.339996 591.419983 l
290.579987 591.359985 l
290.880005 591.419983 l
291.119995 591.600037 l
291.300018 591.839966 l
291.359985 592.140015 l
f
n
297.300018 584.400024 m
298.380005 585.47998 l
291.119995 592.679993 l
290.040009 591.600037 l
f
n
231.479996 599.100037 m
231.419998 599.339966 l
231.23999 599.580017 l
231.0 599.76001 l
230.699997 599.820007 l
230.459991 599.76001 l
230.220001 599.580017 l
230.039993 599.339966 l
229.979996 599.100037 l
230.039993 598.799988 l
230.220001 598.559998 l
230.459991 598.380005 l
230.699997 598.320007 l
231.0 598.380005 l
231.23999 598.559998 l
231.419998 598.799988 l
231.479996 599.100037 l
f
n
238.259995 592.320007 m
238.199997 592.559998 l
238.019989 592.799988 l
237.779999 592.97998 l
237.479996 593.039978 l
237.23999 592.97998 l
237.0 592.799988 l
236.819992 592.559998 l
236.759995 592.320007 l
236.819992 592.019958 l
237.0 591.779968 l
237.23999 591.600037 l
237.479996 591.539978 l
237.779999 591.600037 l
238.019989 591.779968 l
238.199997 592.019958 l
238.259995 592.320007 l
f
n
231.23999 599.640015 m
230.159988 598.559998 l
236.939987 591.779968 l
238.019989 592.859985 l
f
n
231.479996 584.940002 m
231.419998 585.179993 l
231.23999 585.419983 l
231.0 585.600037 l
230.699997 585.659973 l
230.459991 585.600037 l
230.220001 585.419983 l
230.039993 585.179993 l
229.979996 584.940002 l
230.039993 584.640015 l
230.220001 584.400024 l
230.459991 584.219971 l
230.699997 584.159973 l
231.0 584.219971 l
231.23999 584.400024 l
231.419998 584.640015 l
231.479996 584.940002 l
f
n
238.679993 592.140015 m
238.619995 592.380005 l
238.439987 592.619995 l
238.199997 592.799988 l
237.900009 592.859985 l
237.659988 592.799988 l
237.419998 592.619995 l
237.23999 592.380005 l
237.179993 592.140015 l
237.23999 591.839966 l
237.419998 591.600037 l
237.659988 591.419983 l
237.900009 591.359985 l
238.199997 591.419983 l
238.439987 591.600037 l
238.619995 591.839966 l
238.679993 592.140015 l
f
n
230.159988 585.47998 m
231.23999 584.400024 l
238.439987 591.600037 l
237.360001 592.679993 l
f
n
362.700012 592.019958 m
362.639984 592.26001 l
362.459991 592.5 l
362.220001 592.679993 l
361.919983 592.73999 l
361.679993 592.679993 l
361.440002 592.5 l
361.259979 592.26001 l
361.200012 592.019958 l
361.259979 591.719971 l
361.440002 591.47998 l
361.679993 591.299988 l
361.919983 591.23999 l
362.220001 591.299988 l
362.459991 591.47998 l
362.639984 591.719971 l
362.700012 592.019958 l
f
n
395.459991 592.019958 m
395.399994 592.26001 l
395.220001 592.5 l
394.97998 592.679993 l
394.679993 592.73999 l
394.440002 592.679993 l
394.200012 592.5 l
394.019989 592.26001 l
393.959991 592.019958 l
394.019989 591.719971 l
394.200012 591.47998 l
394.440002 591.299988 l
394.679993 591.23999 l
394.97998 591.299988 l
395.220001 591.47998 l
395.399994 591.719971 l
395.459991 592.019958 l
f
n
361.919983 591.23999 32.76001 1.5 re
f
n
355.139984 599.279968 m
355.079987 599.519958 l
354.899994 599.76001 l
354.660004 599.940002 l
354.359985 600.0 l
354.119995 599.940002 l
353.880005 599.76001 l
353.700012 599.519958 l
353.639984 599.279968 l
353.700012 598.97998 l
353.880005 598.73999 l
354.119995 598.559998 l
354.359985 598.5 l
354.660004 598.559998 l
354.899994 598.73999 l
355.079987 598.97998 l
355.139984 599.279968 l
f
n
362.459991 591.959961 m
362.399994 592.200012 l
362.220001 592.440002 l
361.97998 592.619995 l
361.679993 592.679993 l
361.440002 592.619995 l
361.200012 592.440002 l
361.019989 592.200012 l
360.959991 591.959961 l
361.019989 591.659973 l
361.200012 591.419983 l
361.440002 591.23999 l
361.679993 591.179993 l
361.97998 591.23999 l
362.220001 591.419983 l
362.399994 591.659973 l
362.459991 591.959961 l
f
n
354.899994 599.820007 m
353.820007 598.73999 l
361.139984 591.419983 l
362.220001 592.5 l
f
n
355.5 584.940002 m
355.440002 585.179993 l
355.259979 585.419983 l
355.019989 585.600037 l
354.720001 585.659973 l
354.47998 585.600037 l
354.23999 585.419983 l
354.059998 585.179993 l
354.0 584.940002 l
354.059998 584.640015 l
354.23999 584.400024 l
354.47998 584.219971 l
354.720001 584.159973 l
355.019989 584.219971 l
355.259979 584.400024 l
355.440002 584.640015 l
355.5 584.940002 l
f
n
362.700012 592.140015 m
362.639984 592.380005 l
362.459991 592.619995 l
362.220001 592.799988 l
361.919983 592.859985 l
361.679993 592.799988 l
361.440002 592.619995 l
361.259979 592.380005 l
361.200012 592.140015 l
361.259979 591.839966 l
361.440002 591.600037 l
361.679993 591.419983 l
361.919983 591.359985 l
362.220001 591.419983 l
362.459991 591.600037 l
362.639984 591.839966 l
362.700012 592.140015 l
f
n
354.179993 585.47998 m
355.259979 584.400024 l
362.459991 591.600037 l
361.380005 592.679993 l
f
0.0 sg
185.940002 556.440002 m
/N19 10.979996 Tf
(\() show
189.59964 556.440002 m
/N20 10.979996 Tf
(a) show
195.059998 556.440002 m
/N19 10.979996 Tf
(\) SRAM read cycle timing)
[3.652963 2.760371 6.101581 7.320445 7.924264 9.758005 2.760371 3.652963 4.871827 4.871827 5.486704 
2.699981 4.921237 5.460352 4.921237 3.06232 4.871827 2.760371 3.049144 3.049144 8.539142 3.049144 
5.486704 5.486704 ] pdfxs
n
162.0 482.700012 m
161.940002 482.940002 l
161.759995 483.179993 l
161.519989 483.359985 l
161.220001 483.419983 l
160.979996 483.359985 l
160.73999 483.179993 l
160.559998 482.940002 l
160.5 482.700012 l
160.559998 482.399994 l
160.73999 482.160004 l
160.979996 481.97998 l
161.220001 481.919983 l
161.519989 481.97998 l
161.759995 482.160004 l
161.940002 482.399994 l
162.0 482.700012 l
0.0 1.0 1.0 setrgbcolor
f
n
208.979996 482.700012 m
208.919998 482.940002 l
208.73999 483.179993 l
208.5 483.359985 l
208.199997 483.419983 l
207.959991 483.359985 l
207.720001 483.179993 l
207.539993 482.940002 l
207.479996 482.700012 l
207.539993 482.399994 l
207.720001 482.160004 l
207.959991 481.97998 l
208.199997 481.919983 l
208.5 481.97998 l
208.73999 482.160004 l
208.919998 482.399994 l
208.979996 482.700012 l
f
n
161.220001 481.919983 46.979996 1.5 re
f
n
223.319992 482.700012 m
223.259995 482.940002 l
223.080002 483.179993 l
222.839996 483.359985 l
222.539993 483.419983 l
222.300003 483.359985 l
222.059998 483.179993 l
221.87999 482.940002 l
221.819992 482.700012 l
221.87999 482.399994 l
222.059998 482.160004 l
222.300003 481.97998 l
222.539993 481.919983 l
222.839996 481.97998 l
223.080002 482.160004 l
223.259995 482.399994 l
223.319992 482.700012 l
f
n
320.519989 482.700012 m
320.459991 482.940002 l
320.279999 483.179993 l
320.039978 483.359985 l
319.73999 483.419983 l
319.5 483.359985 l
319.259979 483.179993 l
319.079987 482.940002 l
319.019989 482.700012 l
319.079987 482.399994 l
319.259979 482.160004 l
319.5 481.97998 l
319.73999 481.919983 l
320.039978 481.97998 l
320.279999 482.160004 l
320.459991 482.399994 l
320.519989 482.700012 l
f
n
222.539993 481.919983 97.199997 1.5 re
f
n
162.0 496.859985 m
161.940002 497.100006 l
161.759995 497.339996 l
161.519989 497.519989 l
161.220001 497.579987 l
160.979996 497.519989 l
160.73999 497.339996 l
160.559998 497.100006 l
160.5 496.859985 l
160.559998 496.559998 l
160.73999 496.319977 l
160.979996 496.139984 l
161.220001 496.079987 l
161.519989 496.139984 l
161.759995 496.319977 l
161.940002 496.559998 l
162.0 496.859985 l
f
n
208.979996 496.859985 m
208.919998 497.100006 l
208.73999 497.339996 l
208.5 497.519989 l
208.199997 497.579987 l
207.959991 497.519989 l
207.720001 497.339996 l
207.539993 497.100006 l
207.479996 496.859985 l
207.539993 496.559998 l
207.720001 496.319977 l
207.959991 496.139984 l
208.199997 496.079987 l
208.5 496.139984 l
208.73999 496.319977 l
208.919998 496.559998 l
208.979996 496.859985 l
f
n
161.220001 496.079987 46.979996 1.5 re
f
n
334.859985 482.700012 m
334.800018 482.940002 l
334.619995 483.179993 l
334.380005 483.359985 l
334.079987 483.419983 l
333.839996 483.359985 l
333.600006 483.179993 l
333.419983 482.940002 l
333.359985 482.700012 l
333.419983 482.399994 l
333.600006 482.160004 l
333.839996 481.97998 l
334.079987 481.919983 l
334.380005 481.97998 l
334.619995 482.160004 l
334.800018 482.399994 l
334.859985 482.700012 l
f
n
411.47998 482.700012 m
411.419983 482.940002 l
411.23999 483.179993 l
411.0 483.359985 l
410.700012 483.419983 l
410.459991 483.359985 l
410.220001 483.179993 l
410.039978 482.940002 l
409.97998 482.700012 l
410.039978 482.399994 l
410.220001 482.160004 l
410.459991 481.97998 l
410.700012 481.919983 l
411.0 481.97998 l
411.23999 482.160004 l
411.419983 482.399994 l
411.47998 482.700012 l
f
n
334.079987 481.919983 76.619995 1.5 re
f
n
208.979996 496.859985 m
208.919998 497.100006 l
208.73999 497.339996 l
208.5 497.519989 l
208.199997 497.579987 l
207.959991 497.519989 l
207.720001 497.339996 l
207.539993 497.100006 l
207.479996 496.859985 l
207.539993 496.559998 l
207.720001 496.319977 l
207.959991 496.139984 l
208.199997 496.079987 l
208.5 496.139984 l
208.73999 496.319977 l
208.919998 496.559998 l
208.979996 496.859985 l
f
n
223.319992 482.519989 m
223.259995 482.759979 l
223.080002 483.0 l
222.839996 483.179993 l
222.539993 483.23999 l
222.300003 483.179993 l
222.059998 483.0 l
221.87999 482.759979 l
221.819992 482.519989 l
221.87999 482.220001 l
222.059998 481.97998 l
222.300003 481.800018 l
222.539993 481.73999 l
222.839996 481.800018 l
223.080002 481.97998 l
223.259995 482.220001 l
223.319992 482.519989 l
f
n
208.73999 497.399994 m
207.659988 496.319977 l
222.0 481.97998 l
223.080002 483.059998 l
f
n
208.979996 482.700012 m
208.919998 482.940002 l
208.73999 483.179993 l
208.5 483.359985 l
208.199997 483.419983 l
207.959991 483.359985 l
207.720001 483.179993 l
207.539993 482.940002 l
207.479996 482.700012 l
207.539993 482.399994 l
207.720001 482.160004 l
207.959991 481.97998 l
208.199997 481.919983 l
208.5 481.97998 l
208.73999 482.160004 l
208.919998 482.399994 l
208.979996 482.700012 l
f
n
223.319992 497.039978 m
223.259995 497.279999 l
223.080002 497.519989 l
222.839996 497.700012 l
222.539993 497.759979 l
222.300003 497.700012 l
222.059998 497.519989 l
221.87999 497.279999 l
221.819992 497.039978 l
221.87999 496.73999 l
222.059998 496.5 l
222.300003 496.319977 l
222.539993 496.259979 l
222.839996 496.319977 l
223.080002 496.5 l
223.259995 496.73999 l
223.319992 497.039978 l
f
n
207.659988 483.23999 m
208.73999 482.160004 l
223.080002 496.5 l
222.0 497.579987 l
f
n
223.319992 496.859985 m
223.259995 497.100006 l
223.080002 497.339996 l
222.839996 497.519989 l
222.539993 497.579987 l
222.300003 497.519989 l
222.059998 497.339996 l
221.87999 497.100006 l
221.819992 496.859985 l
221.87999 496.559998 l
222.059998 496.319977 l
222.300003 496.139984 l
222.539993 496.079987 l
222.839996 496.139984 l
223.080002 496.319977 l
223.259995 496.559998 l
223.319992 496.859985 l
f
n
320.519989 496.859985 m
320.459991 497.100006 l
320.279999 497.339996 l
320.039978 497.519989 l
319.73999 497.579987 l
319.5 497.519989 l
319.259979 497.339996 l
319.079987 497.100006 l
319.019989 496.859985 l
319.079987 496.559998 l
319.259979 496.319977 l
319.5 496.139984 l
319.73999 496.079987 l
320.039978 496.139984 l
320.279999 496.319977 l
320.459991 496.559998 l
320.519989 496.859985 l
f
n
222.539993 496.079987 97.199997 1.5 re
f
n
334.859985 496.859985 m
334.800018 497.100006 l
334.619995 497.339996 l
334.380005 497.519989 l
334.079987 497.579987 l
333.839996 497.519989 l
333.600006 497.339996 l
333.419983 497.100006 l
333.359985 496.859985 l
333.419983 496.559998 l
333.600006 496.319977 l
333.839996 496.139984 l
334.079987 496.079987 l
334.380005 496.139984 l
334.619995 496.319977 l
334.800018 496.559998 l
334.859985 496.859985 l
f
n
411.47998 496.859985 m
411.419983 497.100006 l
411.23999 497.339996 l
411.0 497.519989 l
410.700012 497.579987 l
410.459991 497.519989 l
410.220001 497.339996 l
410.039978 497.100006 l
409.97998 496.859985 l
410.039978 496.559998 l
410.220001 496.319977 l
410.459991 496.139984 l
410.700012 496.079987 l
411.0 496.139984 l
411.23999 496.319977 l
411.419983 496.559998 l
411.47998 496.859985 l
f
n
334.079987 496.079987 76.619995 1.5 re
f
n
232.199997 455.940002 m
232.139999 456.179993 l
231.959991 456.419983 l
231.720001 456.600006 l
231.419998 456.660004 l
231.179993 456.600006 l
230.940002 456.419983 l
230.759995 456.179993 l
230.699997 455.940002 l
230.759995 455.639984 l
230.940002 455.399994 l
231.179993 455.220001 l
231.419998 455.160004 l
231.720001 455.220001 l
231.959991 455.399994 l
232.139999 455.639984 l
232.199997 455.940002 l
f
n
307.440002 455.940002 m
307.380005 456.179993 l
307.200012 456.419983 l
306.959991 456.600006 l
306.660004 456.660004 l
306.419983 456.600006 l
306.179993 456.419983 l
306.0 456.179993 l
305.940002 455.940002 l
306.0 455.639984 l
306.179993 455.399994 l
306.419983 455.220001 l
306.660004 455.160004 l
306.959991 455.220001 l
307.200012 455.399994 l
307.380005 455.639984 l
307.440002 455.940002 l
f
n
231.419998 455.160004 75.240005 1.5 re
f
n
162.0 470.100006 m
161.940002 470.339996 l
161.759995 470.579987 l
161.519989 470.759979 l
161.220001 470.819977 l
160.979996 470.759979 l
160.73999 470.579987 l
160.559998 470.339996 l
160.5 470.100006 l
160.559998 469.800018 l
160.73999 469.559998 l
160.979996 469.379974 l
161.220001 469.319977 l
161.519989 469.379974 l
161.759995 469.559998 l
161.940002 469.800018 l
162.0 470.100006 l
f
n
232.199997 470.100006 m
232.139999 470.339996 l
231.959991 470.579987 l
231.720001 470.759979 l
231.419998 470.819977 l
231.179993 470.759979 l
230.940002 470.579987 l
230.759995 470.339996 l
230.699997 470.100006 l
230.759995 469.800018 l
230.940002 469.559998 l
231.179993 469.379974 l
231.419998 469.319977 l
231.720001 469.379974 l
231.959991 469.559998 l
232.139999 469.800018 l
232.199997 470.100006 l
f
n
161.220001 469.319977 70.200012 1.5 re
f
n
307.440002 470.279999 m
307.380005 470.519989 l
307.200012 470.759979 l
306.959991 470.940002 l
306.660004 471.0 l
306.419983 470.940002 l
306.179993 470.759979 l
306.0 470.519989 l
305.940002 470.279999 l
306.0 469.97998 l
306.179993 469.73999 l
306.419983 469.559998 l
306.660004 469.5 l
306.959991 469.559998 l
307.200012 469.73999 l
307.380005 469.97998 l
307.440002 470.279999 l
f
n
411.47998 470.279999 m
411.419983 470.519989 l
411.23999 470.759979 l
411.0 470.940002 l
410.700012 471.0 l
410.459991 470.940002 l
410.220001 470.759979 l
410.039978 470.519989 l
409.97998 470.279999 l
410.039978 469.97998 l
410.220001 469.73999 l
410.459991 469.559998 l
410.700012 469.5 l
411.0 469.559998 l
411.23999 469.73999 l
411.419983 469.97998 l
411.47998 470.279999 l
f
n
306.660004 469.5 104.040009 1.5 re
f
0.0 sg
227.639999 487.079987 m
/N19 9.0 Tf
(Address in)
[6.483601 4.4856 4.4856 2.982533 3.981602 3.486668 3.486668 2.2797 2.487599 4.4856 ] pdfxs
n
320.519989 496.859985 m
320.459991 497.100006 l
320.279999 497.339996 l
320.039978 497.519989 l
319.73999 497.579987 l
319.5 497.519989 l
319.259979 497.339996 l
319.079987 497.100006 l
319.019989 496.859985 l
319.079987 496.559998 l
319.259979 496.319977 l
319.5 496.139984 l
319.73999 496.079987 l
320.039978 496.139984 l
320.279999 496.319977 l
320.459991 496.559998 l
320.519989 496.859985 l
0.0 1.0 1.0 setrgbcolor
f
n
334.859985 482.519989 m
334.800018 482.759979 l
334.619995 483.0 l
334.380005 483.179993 l
334.079987 483.23999 l
333.839996 483.179993 l
333.600006 483.0 l
333.419983 482.759979 l
333.359985 482.519989 l
333.419983 482.220001 l
333.600006 481.97998 l
333.839996 481.800018 l
334.079987 481.73999 l
334.380005 481.800018 l
334.619995 481.97998 l
334.800018 482.220001 l
334.859985 482.519989 l
f
n
320.279999 497.399994 m
319.200012 496.319977 l
333.539978 481.97998 l
334.619995 483.059998 l
f
n
320.519989 482.700012 m
320.459991 482.940002 l
320.279999 483.179993 l
320.039978 483.359985 l
319.73999 483.419983 l
319.5 483.359985 l
319.259979 483.179993 l
319.079987 482.940002 l
319.019989 482.700012 l
319.079987 482.399994 l
319.259979 482.160004 l
319.5 481.97998 l
319.73999 481.919983 l
320.039978 481.97998 l
320.279999 482.160004 l
320.459991 482.399994 l
320.519989 482.700012 l
f
n
334.859985 497.039978 m
334.800018 497.279999 l
334.619995 497.519989 l
334.380005 497.700012 l
334.079987 497.759979 l
333.839996 497.700012 l
333.600006 497.519989 l
333.419983 497.279999 l
333.359985 497.039978 l
333.419983 496.73999 l
333.600006 496.5 l
333.839996 496.319977 l
334.079987 496.259979 l
334.380005 496.319977 l
334.619995 496.5 l
334.800018 496.73999 l
334.859985 497.039978 l
f
n
319.200012 483.23999 m
320.279999 482.160004 l
334.619995 496.5 l
333.539978 497.579987 l
f
n
299.459991 521.640015 m
299.459991 523.73999 l
300.119995 523.559998 l
304.97998 522.119995 l
306.660004 521.640015 l
304.97998 521.159973 l
300.119995 519.779968 l
299.459991 519.600037 l
299.459991 520.26001 l
299.820007 520.73999 l
304.679993 522.119995 l
304.97998 521.159973 l
304.679993 521.159973 l
299.820007 522.600037 l
300.119995 523.559998 l
300.47998 523.080017 l
300.47998 521.640015 l
0.0 sg
f
n
299.970001 520.26001 m
299.970001 521.640015 l
1.020004 w
S
1.0 w
n
299.940002 521.640015 m
299.940002 523.080017 l
304.800018 521.640015 l
299.940002 520.26001 l
eofill
n
272.519989 521.610046 m
299.459991 521.610046 l
1.020004 w
S
1.0 w
n
222.600006 521.640015 m
222.600006 519.600037 l
221.940002 519.779968 l
217.019989 521.159973 l
215.400009 521.640015 l
217.019989 522.119995 l
221.940002 523.559998 l
222.600006 523.73999 l
222.600006 523.080017 l
222.23999 522.600037 l
217.319992 521.159973 l
217.019989 522.119995 l
217.319992 522.119995 l
222.23999 520.73999 l
221.940002 519.779968 l
221.580002 520.26001 l
221.580002 521.640015 l
f
n
222.089996 521.640015 m
222.089996 523.080017 l
1.020004 w
S
1.0 w
n
222.119995 521.640015 m
222.119995 520.26001 l
217.199997 521.640015 l
222.119995 523.080017 l
eofill
n
222.600006 521.610046 m
250.5 521.610046 l
1.020004 w
S
1.0 w
255.179993 520.620117 m
/N20 9.0 Tf
(t) show
258.059998 517.680115 m
/N20 6.960007 Tf
(AW)
[4.80096 6.346083 ] pdfxs
n
319.679993 521.640015 m
319.679993 523.73999 l
320.339996 523.559998 l
325.259979 522.119995 l
327.0 521.640015 l
325.259979 521.159973 l
320.339996 519.779968 l
319.679993 519.600037 l
319.679993 520.26001 l
320.039978 520.73999 l
324.959991 522.119995 l
325.259979 521.159973 l
324.959991 521.159973 l
320.039978 522.600037 l
320.339996 523.559998 l
320.700012 523.080017 l
320.700012 521.640015 l
f
n
320.190002 520.26001 m
320.190002 521.640015 l
1.020004 w
S
1.0 w
n
320.160004 521.640015 m
320.160004 523.080017 l
325.079987 521.640015 l
320.160004 520.26001 l
eofill
n
313.859985 521.640015 m
313.859985 519.600037 l
313.200012 519.779968 l
308.279999 521.159973 l
306.660004 521.640015 l
308.279999 522.119995 l
313.200012 523.559998 l
313.859985 523.73999 l
313.859985 523.080017 l
313.5 522.600037 l
308.579987 521.159973 l
308.279999 522.119995 l
308.579987 522.119995 l
313.5 520.73999 l
313.200012 519.779968 l
312.839996 520.26001 l
312.839996 521.640015 l
f
n
313.350006 521.640015 m
313.350006 523.080017 l
1.020004 w
S
1.0 w
n
313.380005 521.640015 m
313.380005 520.26001 l
308.459991 521.640015 l
313.380005 523.080017 l
eofill
n
313.859985 521.610046 m
319.679993 521.610046 l
1.020004 w
S
1.0 w
335.579987 518.339966 m
/N20 9.0 Tf
(t) show
338.459991 515.459961 m
/N20 6.960007 Tf
(HA)
[5.638998 4.866384 ] pdfxs
185.940002 390.539978 m
/N19 10.979996 Tf
(\() show
189.59964 390.539978 m
/N20 10.979996 Tf
(b) show
195.059998 390.539978 m
/N19 10.979996 Tf
(\) SRAM write cycle timing)
[3.657355 2.760371 6.105973 7.324837 7.928657 9.762398 2.760371 7.928657 3.657355 3.053535 3.053535 
4.876219 2.760371 4.876219 5.491096 4.876219 3.053535 4.876219 2.760371 3.053535 3.053535 8.543533 
3.053535 5.491096 5.491096 ] pdfxs
n
263.579987 443.759979 m
263.519989 444.0 l
263.339996 444.23999 l
263.100006 444.419983 l
262.800018 444.47998 l
262.559998 444.419983 l
262.320007 444.23999 l
262.139984 444.0 l
262.079987 443.759979 l
262.139984 443.459991 l
262.320007 443.220001 l
262.559998 443.039978 l
262.800018 442.97998 l
263.100006 443.039978 l
263.339996 443.220001 l
263.519989 443.459991 l
263.579987 443.759979 l
0.0 1.0 1.0 setrgbcolor
f
n
320.160004 443.759979 m
320.100006 444.0 l
319.919983 444.23999 l
319.679993 444.419983 l
319.380005 444.47998 l
319.139984 444.419983 l
318.899994 444.23999 l
318.720001 444.0 l
318.660004 443.759979 l
318.720001 443.459991 l
318.899994 443.220001 l
319.139984 443.039978 l
319.380005 442.97998 l
319.679993 443.039978 l
319.919983 443.220001 l
320.100006 443.459991 l
320.160004 443.759979 l
f
n
262.800018 442.97998 56.579987 1.5 re
f
n
263.579987 429.419983 m
263.519989 429.660004 l
263.339996 429.899994 l
263.100006 430.079987 l
262.800018 430.139984 l
262.559998 430.079987 l
262.320007 429.899994 l
262.139984 429.660004 l
262.079987 429.419983 l
262.139984 429.119995 l
262.320007 428.880005 l
262.559998 428.700012 l
262.800018 428.639984 l
263.100006 428.700012 l
263.339996 428.880005 l
263.519989 429.119995 l
263.579987 429.419983 l
f
n
320.519989 429.419983 m
320.459991 429.660004 l
320.279999 429.899994 l
320.039978 430.079987 l
319.73999 430.139984 l
319.5 430.079987 l
319.259979 429.899994 l
319.079987 429.660004 l
319.019989 429.419983 l
319.079987 429.119995 l
319.259979 428.880005 l
319.5 428.700012 l
319.73999 428.639984 l
320.039978 428.700012 l
320.279999 428.880005 l
320.459991 429.119995 l
320.519989 429.419983 l
f
n
262.800018 428.639984 56.940002 1.5 re
f
0.0 sg
274.079987 433.859985 m
/N19 9.0 Tf
(Data in )
[6.507901 3.961802 2.511899 3.961802 2.2797 2.511899 4.4397 2.2797 ] pdfxs
n
162.0 436.5 m
161.940002 436.73999 l
161.759995 436.97998 l
161.519989 437.160004 l
161.220001 437.220001 l
160.979996 437.160004 l
160.73999 436.97998 l
160.559998 436.73999 l
160.5 436.5 l
160.559998 436.200012 l
160.73999 435.959991 l
160.979996 435.779999 l
161.220001 435.720001 l
161.519989 435.779999 l
161.759995 435.959991 l
161.940002 436.200012 l
162.0 436.5 l
0.0 1.0 1.0 setrgbcolor
f
n
257.160004 436.5 m
257.100006 436.73999 l
256.919983 436.97998 l
256.679993 437.160004 l
256.380005 437.220001 l
256.139984 437.160004 l
255.900009 436.97998 l
255.720001 436.73999 l
255.659988 436.5 l
255.720001 436.200012 l
255.900009 435.959991 l
256.139984 435.779999 l
256.380005 435.720001 l
256.679993 435.779999 l
256.919983 435.959991 l
257.100006 436.200012 l
257.160004 436.5 l
f
n
161.220001 435.720001 95.160004 1.5 re
f
n
263.820007 444.0 m
263.759979 444.23999 l
263.579987 444.47998 l
263.339996 444.660004 l
263.040009 444.720001 l
262.800018 444.660004 l
262.559998 444.47998 l
262.380005 444.23999 l
262.320007 444.0 l
262.380005 443.700012 l
262.559998 443.459991 l
262.800018 443.279999 l
263.040009 443.220001 l
263.339996 443.279999 l
263.579987 443.459991 l
263.759979 443.700012 l
263.820007 444.0 l
f
n
256.259979 436.440002 m
256.200012 436.679993 l
256.019989 436.919983 l
255.779999 437.100006 l
255.479996 437.160004 l
255.23999 437.100006 l
255.0 436.919983 l
254.819992 436.679993 l
254.759995 436.440002 l
254.819992 436.139984 l
255.0 435.899994 l
255.23999 435.720001 l
255.479996 435.660004 l
255.779999 435.720001 l
256.019989 435.899994 l
256.200012 436.139984 l
256.259979 436.440002 l
f
n
263.579987 443.459991 m
262.5 444.539978 l
254.939987 436.97998 l
256.019989 435.899994 l
f
n
263.579987 429.419983 m
263.519989 429.660004 l
263.339996 429.899994 l
263.100006 430.079987 l
262.800018 430.139984 l
262.559998 430.079987 l
262.320007 429.899994 l
262.139984 429.660004 l
262.079987 429.419983 l
262.139984 429.119995 l
262.320007 428.880005 l
262.559998 428.700012 l
262.800018 428.639984 l
263.100006 428.700012 l
263.339996 428.880005 l
263.519989 429.119995 l
263.579987 429.419983 l
f
n
256.380005 436.619995 m
256.320007 436.859985 l
256.139984 437.100006 l
255.900009 437.279999 l
255.600006 437.339996 l
255.360001 437.279999 l
255.119995 437.100006 l
254.939987 436.859985 l
254.87999 436.619995 l
254.939987 436.319977 l
255.119995 436.079987 l
255.360001 435.899994 l
255.600006 435.839996 l
255.900009 435.899994 l
256.139984 436.079987 l
256.320007 436.319977 l
256.380005 436.619995 l
f
n
262.259979 428.880005 m
263.339996 429.959991 l
256.139984 437.160004 l
255.059998 436.079987 l
f
n
327.660004 436.5 m
327.600006 436.73999 l
327.419983 436.97998 l
327.179993 437.160004 l
326.880005 437.220001 l
326.639984 437.160004 l
326.399994 436.97998 l
326.220001 436.73999 l
326.160004 436.5 l
326.220001 436.200012 l
326.399994 435.959991 l
326.639984 435.779999 l
326.880005 435.720001 l
327.179993 435.779999 l
327.419983 435.959991 l
327.600006 436.200012 l
327.660004 436.5 l
f
n
411.47998 436.5 m
411.419983 436.73999 l
411.23999 436.97998 l
411.0 437.160004 l
410.700012 437.220001 l
410.459991 437.160004 l
410.220001 436.97998 l
410.039978 436.73999 l
409.97998 436.5 l
410.039978 436.200012 l
410.220001 435.959991 l
410.459991 435.779999 l
410.700012 435.720001 l
411.0 435.779999 l
411.23999 435.959991 l
411.419983 436.200012 l
411.47998 436.5 l
f
n
326.880005 435.720001 83.820007 1.5 re
f
n
320.160004 443.759979 m
320.100006 444.0 l
319.919983 444.23999 l
319.679993 444.419983 l
319.380005 444.47998 l
319.139984 444.419983 l
318.899994 444.23999 l
318.720001 444.0 l
318.660004 443.759979 l
318.720001 443.459991 l
318.899994 443.220001 l
319.139984 443.039978 l
319.380005 442.97998 l
319.679993 443.039978 l
319.919983 443.220001 l
320.100006 443.459991 l
320.160004 443.759979 l
f
n
327.47998 436.440002 m
327.419983 436.679993 l
327.23999 436.919983 l
327.0 437.100006 l
326.700012 437.160004 l
326.459991 437.100006 l
326.220001 436.919983 l
326.039978 436.679993 l
325.97998 436.440002 l
326.039978 436.139984 l
326.220001 435.899994 l
326.459991 435.720001 l
326.700012 435.660004 l
327.0 435.720001 l
327.23999 435.899994 l
327.419983 436.139984 l
327.47998 436.440002 l
f
n
319.919983 444.300018 m
318.839996 443.220001 l
326.160004 435.899994 l
327.23999 436.97998 l
f
n
320.519989 429.419983 m
320.459991 429.660004 l
320.279999 429.899994 l
320.039978 430.079987 l
319.73999 430.139984 l
319.5 430.079987 l
319.259979 429.899994 l
319.079987 429.660004 l
319.019989 429.419983 l
319.079987 429.119995 l
319.259979 428.880005 l
319.5 428.700012 l
319.73999 428.639984 l
320.039978 428.700012 l
320.279999 428.880005 l
320.459991 429.119995 l
320.519989 429.419983 l
f
n
327.720001 436.619995 m
327.660004 436.859985 l
327.47998 437.100006 l
327.23999 437.279999 l
326.940002 437.339996 l
326.700012 437.279999 l
326.459991 437.100006 l
326.279999 436.859985 l
326.220001 436.619995 l
326.279999 436.319977 l
326.459991 436.079987 l
326.700012 435.899994 l
326.940002 435.839996 l
327.23999 435.899994 l
327.47998 436.079987 l
327.660004 436.319977 l
327.720001 436.619995 l
f
n
319.200012 429.959991 m
320.279999 428.880005 l
327.47998 436.079987 l
326.399994 437.160004 l
f
n
232.199997 470.100006 m
232.139999 470.339996 l
231.959991 470.579987 l
231.720001 470.759979 l
231.419998 470.819977 l
231.179993 470.759979 l
230.940002 470.579987 l
230.759995 470.339996 l
230.699997 470.100006 l
230.759995 469.800018 l
230.940002 469.559998 l
231.179993 469.379974 l
231.419998 469.319977 l
231.720001 469.379974 l
231.959991 469.559998 l
232.139999 469.800018 l
232.199997 470.100006 l
f
n
232.199997 455.940002 m
232.139999 456.179993 l
231.959991 456.419983 l
231.720001 456.600006 l
231.419998 456.660004 l
231.179993 456.600006 l
230.940002 456.419983 l
230.759995 456.179993 l
230.699997 455.940002 l
230.759995 455.639984 l
230.940002 455.399994 l
231.179993 455.220001 l
231.419998 455.160004 l
231.720001 455.220001 l
231.959991 455.399994 l
232.139999 455.639984 l
232.199997 455.940002 l
f
n
230.699997 455.940002 1.5 14.160004 re
f
n
307.440002 455.940002 m
307.380005 456.179993 l
307.200012 456.419983 l
306.959991 456.600006 l
306.660004 456.660004 l
306.419983 456.600006 l
306.179993 456.419983 l
306.0 456.179993 l
305.940002 455.940002 l
306.0 455.639984 l
306.179993 455.399994 l
306.419983 455.220001 l
306.660004 455.160004 l
306.959991 455.220001 l
307.200012 455.399994 l
307.380005 455.639984 l
307.440002 455.940002 l
f
n
307.440002 470.279999 m
307.380005 470.519989 l
307.200012 470.759979 l
306.959991 470.940002 l
306.660004 471.0 l
306.419983 470.940002 l
306.179993 470.759979 l
306.0 470.519989 l
305.940002 470.279999 l
306.0 469.97998 l
306.179993 469.73999 l
306.419983 469.559998 l
306.660004 469.5 l
306.959991 469.559998 l
307.200012 469.73999 l
307.380005 469.97998 l
307.440002 470.279999 l
f
n
305.940002 455.940002 1.5 14.339996 re
f
n
319.679993 418.380005 m
319.679993 420.47998 l
320.339996 420.300018 l
325.259979 418.859985 l
327.0 418.380005 l
325.259979 417.899994 l
320.339996 416.519989 l
319.679993 416.339996 l
319.679993 417.0 l
320.039978 417.47998 l
324.959991 418.859985 l
325.259979 417.899994 l
324.959991 417.899994 l
320.039978 419.339996 l
320.339996 420.300018 l
320.700012 419.819977 l
320.700012 418.380005 l
0.0 sg
f
n
320.190002 417.0 m
320.190002 418.380005 l
1.020004 w
S
1.0 w
n
320.160004 418.380005 m
320.160004 419.819977 l
325.079987 418.380005 l
320.160004 417.0 l
eofill
n
313.859985 418.380005 m
313.859985 416.339996 l
313.200012 416.519989 l
308.279999 417.899994 l
306.660004 418.380005 l
308.279999 418.859985 l
313.200012 420.300018 l
313.859985 420.47998 l
313.859985 419.819977 l
313.5 419.339996 l
308.579987 417.899994 l
308.279999 418.859985 l
308.579987 418.859985 l
313.5 417.47998 l
313.200012 416.519989 l
312.839996 417.0 l
312.839996 418.380005 l
f
n
313.350006 418.380005 m
313.350006 419.820007 l
1.020004 w
S
1.0 w
n
313.380005 418.380005 m
313.380005 417.0 l
308.459991 418.380005 l
313.380005 419.819977 l
eofill
n
313.859985 418.350006 m
319.679993 418.350006 l
1.020004 w
S
1.0 w
332.519989 416.399994 m
/N20 9.0 Tf
(t) show
335.399994 413.519989 m
/N20 6.960007 Tf
(HD)
[5.579142 5.579142 ] pdfxs
n
299.459991 418.380005 m
299.459991 420.47998 l
300.119995 420.300018 l
304.97998 418.859985 l
306.660004 418.380005 l
304.97998 417.899994 l
300.119995 416.519989 l
299.459991 416.339996 l
299.459991 417.0 l
299.820007 417.47998 l
304.679993 418.859985 l
304.97998 417.899994 l
304.679993 417.899994 l
299.820007 419.339996 l
300.119995 420.300018 l
300.47998 419.819977 l
300.47998 418.380005 l
f
n
299.970001 417.0 m
299.970001 418.380005 l
1.020004 w
S
1.0 w
n
299.940002 418.380005 m
299.940002 419.819977 l
304.800018 418.380005 l
299.940002 417.0 l
eofill
n
291.899994 418.350006 m
299.459991 418.350006 l
1.020004 w
S
1.0 w
n
262.800018 418.380005 m
262.800018 416.339996 l
262.139984 416.519989 l
257.279999 417.899994 l
255.659988 418.380005 l
257.279999 418.859985 l
262.139984 420.300018 l
262.800018 420.47998 l
262.800018 419.819977 l
262.440002 419.339996 l
257.579987 417.899994 l
257.279999 418.859985 l
257.579987 418.859985 l
262.440002 417.47998 l
262.139984 416.519989 l
261.779999 417.0 l
261.779999 418.380005 l
f
n
262.290009 418.380005 m
262.290009 419.820007 l
1.020004 w
S
1.0 w
n
262.320007 418.380005 m
262.320007 417.0 l
257.459991 418.380005 l
262.320007 419.819977 l
eofill
n
262.859985 418.350006 m
271.320007 418.350006 l
1.020004 w
S
1.0 w
276.47998 417.0 m
/N20 9.0 Tf
(t) show
279.300018 414.059998 m
/N20 6.960007 Tf
(SD)
[4.0201 5.565222 ] pdfxs
n
215.100006 661.26001 0.600006 0.300049 re
0.50196  sg
f
n
215.100006 605.339966 0.600006 55.919983 re
f
n
339.119995 661.26001 0.600006 0.300049 re
f
n
339.119995 605.640015 0.600006 55.619995 re
f
n
361.619995 661.26001 0.600006 0.300049 re
f
n
361.619995 575.580017 0.600006 85.679993 re
f
n
290.339996 661.26001 0.600006 0.300049 re
f
n
290.339996 575.580017 0.600006 85.679993 re
f
n
215.100006 532.26001 0.600006 0.300049 re
f
n
215.100006 442.679993 0.600006 89.580017 re
f
n
326.579987 532.26001 0.600006 0.300049 re
f
n
326.579987 476.579987 0.600006 55.680023 re
f
n
326.579987 449.279999 0.600006 0.299988 re
f
n
326.579987 408.839996 0.600006 40.440002 re
f
n
255.300003 449.279999 0.599991 0.299988 re
f
n
255.300003 408.839996 0.599991 40.440002 re
f
n
306.359985 532.26001 0.599976 0.300049 re
f
n
306.359985 408.839996 0.599976 123.420013 re
f
n
231.119995 477.0 0.600006 0.300018 re
f
n
231.119995 442.679993 0.600006 34.320007 re
f
n
224.759995 450.179993 m
224.759995 452.039978 l
225.419998 451.859985 l
229.73999 450.660004 l
231.360001 450.179993 l
229.73999 449.700012 l
225.419998 448.440002 l
224.759995 448.259979 l
224.759995 448.919983 l
225.119995 449.399994 l
229.440002 450.660004 l
229.73999 449.700012 l
229.440002 449.700012 l
225.119995 450.899994 l
225.419998 451.859985 l
225.779999 451.380005 l
225.779999 450.179993 l
0.0  sg
f
n
225.269989 448.919983 m
225.269989 450.179993 l
1.020004 w
S
1.0 w
n
225.23999 450.179993 m
225.23999 451.380005 l
229.559998 450.179993 l
225.23999 448.919983 l
eofill
n
222.059998 450.179993 m
222.059998 448.259979 l
221.400009 448.440002 l
217.019989 449.700012 l
215.339996 450.179993 l
217.080002 450.660004 l
221.459991 451.859985 l
222.059998 452.039978 l
222.059998 451.380005 l
221.699997 450.899994 l
217.319992 449.700012 l
217.080002 450.660004 l
217.319992 450.660004 l
221.699997 449.399994 l
221.400009 448.440002 l
221.039993 448.919983 l
221.039993 450.179993 l
f
n
221.549988 450.179993 m
221.549988 451.380005 l
1.020004 w
S
1.0 w
n
221.580002 450.179993 m
221.580002 448.919983 l
217.199997 450.179993 l
221.580002 451.380005 l
eofill
n
223.380005 449.639984 m
223.380005 450.659973 l
2.639999 w
S
1.0 w
199.860001 448.859985 m
/N20 9.0 Tf
(t) show
202.679993 445.919983 m
/N20 6.960007 Tf
(SA)
[4.079956 4.852464 ] pdfxs
126.779999 619.619995 m
/N19 9.0 Tf
(A) show
133.619995 616.680115 m
/N19 6.960007 Tf
(170)
[3.480003 10.499866 3.480003 ] pdfxs
142.319992 616.680115 m
(\226) show
121.259995 591.23999 m
/N19 9.0 Tf
(I/O)
[3.008633 2.513699 6.509701 ] pdfxs
133.619995 588.359985 m
/N19 6.960007 Tf
(170)
[3.480003 10.499866 3.480003 ] pdfxs
142.319992 588.359985 m
(\226) show
126.779999 489.779999 m
/N19 9.0 Tf
(A) show
133.619995 486.839996 m
/N19 6.960007 Tf
(170)
[3.480003 10.499866 3.480003 ] pdfxs
142.319992 486.839996 m
(\226) show
121.259995 435.119995 m
/N19 9.0 Tf
(I/O)
[3.008633 2.513699 6.509701 ] pdfxs
133.619995 432.179993 m
/N19 6.960007 Tf
(170)
[3.480003 10.499866 3.480003 ] pdfxs
142.319992 432.179993 m
(\226) show
137.100006 460.079987 m
/N19 9.0 Tf
(WE)
[8.461802 5.464732 ] pdfxs
n
137.910004 467.940002 m
137.910004 468.360016 l
0.180008 w
S
1.0 w
n
138.0 468.150024 m
150.360001 468.150024 l
0.420013 w
S
1.0 w
n
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%DocumentNeededResources:
%%+ font TimesNewRomanPSMT
%%+ font TimesNewRomanPS-ItalicMT
%%EOF
