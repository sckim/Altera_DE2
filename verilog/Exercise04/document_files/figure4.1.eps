%!PS-Adobe-3.0 EPSF-3.0
%%Title: (figure6.1.fm)
%%Version: 1 4
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 14:07:43 05/04/06
%%For: (sbrown)
%%DocumentData: Clean7Bit
%%BoundingBox: 122 521 487 617
%%HiResBoundingBox: 122.0 521.0 487.0 616.980042
%%Pages: 0
%%DocumentProcessColors: Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L1 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr SEPS ttf hb Printer/PostScript Color Management 0
%%BeginResource: file Pscript_T42Hdr PSVER
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.18 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.18 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset l2compat 6.0 1
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
cvi
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset sep_ops 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/undefineRes {
null exch
defineRes
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource TimesNewRomanPSMT
[/N22/TimesNewRomanPSMT 1 TZ

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 1221 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:ec004df8-1319-4f2b-aabb-aab9c59d72b1' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Acrobat Distiller 6.0 (Windows)'></rdf:Description>
<rdf:Description rdf:about='uuid:ec004df8-1319-4f2b-aabb-aab9c59d72b1' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:CreatorTool='FrameMaker 7.0' xap:ModifyDate='2006-05-04T14:07:13-04:00' xap:CreateDate='1997-04-11T18:09:45Z' xap:MetadataDate='2006-05-04T14:07:13-04:00'></rdf:Description>
<rdf:Description rdf:about='uuid:ec004df8-1319-4f2b-aabb-aab9c59d72b1' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:dede8767-0174-4065-85b3-6c554602ba0b'/>
<rdf:Description rdf:about='uuid:ec004df8-1319-4f2b-aabb-aab9c59d72b1' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>figure6.1.fm</rdf:li></rdf:Alt></dc:title><dc:creator><rdf:Seq><rdf:li>sbrown</rdf:li></rdf:Seq></dc:creator></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
122 521 365 96 rectclip
122.0 521.0 365.0 95.980042 re
W
n
n
171.690002 590.880005 m
171.690002 591.480042 l
0.300003 w
S
1.0 w
n
155.699997 591.180054 m
171.539993 591.180054 l
0.600037 w
S
1.0 w
n
162.360001 592.380005 m
161.87999 592.320007 l
161.519989 592.019958 l
161.279999 591.659973 l
161.160004 591.179993 l
161.279999 590.700012 l
161.519989 590.339966 l
161.87999 590.100037 l
162.360001 589.97998 l
162.839996 590.100037 l
163.199997 590.339966 l
163.5 590.700012 l
163.559998 591.179993 l
163.5 591.659973 l
163.199997 592.019958 l
162.839996 592.320007 l
162.360001 592.380005 l
eofill
n
162.419998 592.080017 m
161.940002 592.019958 l
162.059998 592.080017 l
161.699997 591.779968 l
161.759995 591.839966 l
161.519989 591.47998 l
161.580002 591.600037 l
161.459991 591.119995 l
161.459991 591.23999 l
161.580002 590.76001 l
161.519989 590.880005 l
161.759995 590.519958 l
161.699997 590.580017 l
162.059998 590.339966 l
161.940002 590.400024 l
162.419998 590.279968 l
162.300003 590.279968 l
162.779999 590.400024 l
162.660004 590.339966 l
163.019989 590.580017 l
162.959991 590.519958 l
163.259995 590.880005 l
163.199997 590.700012 l
163.259995 591.179993 l
163.259995 591.119995 l
163.199997 591.600037 l
163.259995 591.47998 l
162.959991 591.839966 l
163.019989 591.779968 l
162.660004 592.080017 l
162.839996 592.019958 l
162.360001 592.080017 l
162.419998 592.679993 l
162.900009 592.619995 l
163.019989 592.559998 l
163.37999 592.26001 l
163.440002 592.200012 l
163.73999 591.839966 l
163.800003 591.659973 l
163.860001 591.179993 l
163.860001 591.119995 l
163.800003 590.640015 l
163.73999 590.519958 l
163.440002 590.159973 l
163.37999 590.100037 l
163.019989 589.859985 l
162.900009 589.799988 l
162.419998 589.679993 l
162.300003 589.679993 l
161.819992 589.799988 l
161.699997 589.859985 l
161.339996 590.100037 l
161.279999 590.159973 l
161.039993 590.519958 l
160.979996 590.640015 l
160.860001 591.119995 l
160.860001 591.23999 l
160.979996 591.719971 l
161.039993 591.839966 l
161.279999 592.200012 l
161.339996 592.26001 l
161.699997 592.559998 l
161.87999 592.619995 l
162.360001 592.679993 l
f
n
162.360001 592.080017 m
162.419998 592.080017 l
162.360001 592.679993 l
162.419998 592.679993 l
f
n
219.929993 590.880005 m
219.929993 591.480042 l
0.300003 w
S
1.0 w
n
203.580002 591.180054 m
219.779999 591.180054 l
0.600037 w
S
1.0 w
n
171.959991 552.900024 31.919998 51.059998 re
1.0 sg
f
n
171.959991 603.929993 m
204.659988 603.929993 l
1.5 w
0.0  sg
S
1.0 w
n
203.909988 552.119995 m
203.909988 603.959961 l
1.5 w
S
1.0 w
n
171.23999 552.869995 m
203.87999 552.869995 l
1.5 w
S
1.0 w
n
171.98999 552.900024 m
171.98999 604.680054 l
1.5 w
S
1.0 w
175.139999 588.299988 m
/N22 9.0 Tf
(T) show
193.860001 588.659973 m
(Q) show
193.560303 563.099976 m
(Q) show
n
194.369995 570.900024 m
194.369995 571.320007 l
0.180008 w
S
1.0 w
n
194.459991 571.109985 m
199.319992 571.109985 l
0.419983 w
S
1.0 w
131.400009 563.339966 m
(Clock)
[5.998567 2.497499 4.4955 3.991502 4.4955 ] pdfxs
n
261.899994 552.900024 31.920013 51.059998 re
1.0  sg
f
n
261.899994 603.929993 m
294.599976 603.929993 l
1.5 w
0.0  sg
S
1.0 w
n
293.850006 552.119995 m
293.850006 603.959961 l
1.5 w
S
1.0 w
n
261.179993 552.869995 m
293.820007 552.869995 l
1.5 w
S
1.0 w
n
261.929993 552.900024 m
261.929993 604.680054 l
1.5 w
S
1.0 w
265.079987 588.299988 m
(T) show
283.799988 588.659973 m
(Q) show
283.500275 563.099976 m
(Q) show
n
284.309998 570.900024 m
284.309998 571.320007 l
0.179993 w
S
1.0 w
n
284.399994 571.109985 m
289.26001 571.109985 l
0.419983 w
S
1.0 w
n
262.019989 569.100037 m
261.779999 569.219971 l
261.540009 568.679993 l
261.779999 568.559998 l
f
n
262.019989 569.100037 m
261.779999 568.559998 l
268.139984 565.380005 l
268.380005 565.380005 l
268.97998 565.679993 l
268.380005 565.919983 l
f
n
262.019989 562.200012 m
261.779999 562.080017 l
261.540009 562.619995 l
261.779999 562.73999 l
f
n
268.380005 565.380005 m
268.139984 565.919983 l
261.779999 562.73999 l
262.019989 562.200012 l
f
n
172.080002 569.100037 m
171.839996 569.219971 l
171.600006 568.679993 l
171.839996 568.559998 l
f
n
172.080002 569.100037 m
171.839996 568.559998 l
178.199997 565.380005 l
178.440002 565.380005 l
179.039993 565.679993 l
178.440002 565.919983 l
f
n
172.080002 562.200012 m
171.839996 562.080017 l
171.600006 562.619995 l
171.839996 562.73999 l
f
n
178.440002 565.380005 m
178.199997 565.919983 l
171.839996 562.73999 l
172.080002 562.200012 l
f
n
172.109985 565.380005 m
172.109985 565.980042 l
0.300003 w
S
1.0 w
n
155.699997 565.680054 m
171.959991 565.680054 l
0.600037 w
S
1.0 w
n
162.360001 566.880005 m
161.87999 566.820007 l
161.519989 566.519958 l
161.279999 566.159973 l
161.160004 565.679993 l
161.279999 565.200012 l
161.519989 564.839966 l
161.87999 564.600037 l
162.360001 564.47998 l
162.839996 564.600037 l
163.199997 564.839966 l
163.5 565.200012 l
163.559998 565.679993 l
163.5 566.159973 l
163.199997 566.519958 l
162.839996 566.820007 l
162.360001 566.880005 l
eofill
n
162.419998 566.580017 m
161.940002 566.519958 l
162.059998 566.580017 l
161.699997 566.279968 l
161.759995 566.339966 l
161.519989 565.97998 l
161.580002 566.100037 l
161.459991 565.619995 l
161.459991 565.73999 l
161.580002 565.26001 l
161.519989 565.380005 l
161.759995 565.019958 l
161.699997 565.080017 l
162.059998 564.839966 l
161.940002 564.900024 l
162.419998 564.779968 l
162.300003 564.779968 l
162.779999 564.900024 l
162.660004 564.839966 l
163.019989 565.080017 l
162.959991 565.019958 l
163.259995 565.380005 l
163.199997 565.200012 l
163.259995 565.679993 l
163.259995 565.619995 l
163.199997 566.100037 l
163.259995 565.97998 l
162.959991 566.339966 l
163.019989 566.279968 l
162.660004 566.580017 l
162.839996 566.519958 l
162.360001 566.580017 l
162.419998 567.179993 l
162.900009 567.119995 l
163.019989 567.059998 l
163.37999 566.76001 l
163.440002 566.700012 l
163.73999 566.339966 l
163.800003 566.159973 l
163.860001 565.679993 l
163.860001 565.619995 l
163.800003 565.140015 l
163.73999 565.019958 l
163.440002 564.659973 l
163.37999 564.600037 l
163.019989 564.359985 l
162.900009 564.299988 l
162.419998 564.179993 l
162.300003 564.179993 l
161.819992 564.299988 l
161.699997 564.359985 l
161.339996 564.600037 l
161.279999 564.659973 l
161.039993 565.019958 l
160.979996 565.140015 l
160.860001 565.619995 l
160.860001 565.73999 l
160.979996 566.219971 l
161.039993 566.339966 l
161.279999 566.700012 l
161.339996 566.76001 l
161.699997 567.059998 l
161.87999 567.119995 l
162.360001 567.179993 l
f
n
162.360001 566.580017 m
162.419998 566.580017 l
162.360001 567.179993 l
162.419998 567.179993 l
f
127.919998 588.659973 m
(Enable)
[5.469232 4.4703 4.021202 4.5 2.472299 3.966302 ] pdfxs
n
309.27002 590.880005 m
309.27002 591.480042 l
0.300018 w
S
1.0 w
n
293.519989 591.180054 m
309.119995 591.180054 l
0.600037 w
S
1.0 w
n
251.48999 590.880005 m
251.48999 591.480042 l
0.300003 w
S
1.0 w
n
251.639999 591.180054 m
261.539978 591.180054 l
0.600037 w
S
1.0 w
n
251.339996 565.680054 m
261.539978 565.680054 l
0.600037 w
S
1.0 w
n
251.639999 539.880005 m
251.639999 565.679993 l
0.600006 w
S
1.0 w
n
251.639999 598.799988 m
251.159988 598.679993 l
250.800003 598.440002 l
250.5 598.019958 l
250.439987 597.600037 l
250.5 597.119995 l
250.800003 596.700012 l
251.159988 596.459961 l
251.639999 596.339966 l
252.119995 596.459961 l
252.479996 596.700012 l
252.720001 597.119995 l
252.839996 597.600037 l
252.720001 598.019958 l
252.479996 598.440002 l
252.119995 598.679993 l
251.639999 598.799988 l
eofill
n
251.699997 598.5 m
251.220001 598.380005 l
251.339996 598.440002 l
250.979996 598.200012 l
251.039993 598.26001 l
250.73999 597.839966 l
250.800003 597.959961 l
250.73999 597.539978 l
250.73999 597.600037 l
250.800003 597.119995 l
250.73999 597.299988 l
251.039993 596.880005 l
250.979996 596.940002 l
251.339996 596.700012 l
251.220001 596.76001 l
251.699997 596.640015 l
251.580002 596.640015 l
252.059998 596.76001 l
251.939987 596.700012 l
252.300003 596.940002 l
252.23999 596.820007 l
252.479996 597.23999 l
252.419998 597.179993 l
252.539993 597.659973 l
252.539993 597.47998 l
252.419998 597.900024 l
252.479996 597.839966 l
252.23999 598.26001 l
252.300003 598.200012 l
251.939987 598.440002 l
252.059998 598.380005 l
251.580002 598.5 l
251.699997 599.100037 l
252.179993 598.97998 l
252.300003 598.919983 l
252.659988 598.679993 l
252.779999 598.559998 l
253.019989 598.140015 l
253.019989 598.080017 l
253.139999 597.659973 l
253.139999 597.539978 l
253.019989 597.059998 l
253.019989 596.940002 l
252.779999 596.519958 l
252.659988 596.459961 l
252.300003 596.219971 l
252.179993 596.159973 l
251.699997 596.039978 l
251.580002 596.039978 l
251.100006 596.159973 l
250.979996 596.219971 l
250.619995 596.459961 l
250.559998 596.519958 l
250.259995 596.940002 l
250.199997 597.059998 l
250.139999 597.539978 l
250.139999 597.600037 l
250.199997 598.019958 l
250.259995 598.200012 l
250.559998 598.619995 l
250.619995 598.679993 l
250.979996 598.919983 l
251.100006 598.97998 l
251.580002 599.100037 l
f
n
251.580002 598.5 m
251.699997 598.5 l
251.580002 599.100037 l
251.699997 599.100037 l
f
n
251.639999 541.380005 m
251.159988 541.26001 l
250.800003 541.019958 l
250.5 540.659973 l
250.439987 540.179993 l
250.5 539.700012 l
250.800003 539.339966 l
251.159988 539.039978 l
251.639999 538.97998 l
252.119995 539.039978 l
252.479996 539.339966 l
252.720001 539.700012 l
252.839996 540.179993 l
252.720001 540.659973 l
252.479996 541.019958 l
252.119995 541.26001 l
251.639999 541.380005 l
eofill
n
251.699997 541.080017 m
251.220001 540.959961 l
251.339996 541.019958 l
250.979996 540.779968 l
251.039993 540.839966 l
250.73999 540.47998 l
250.800003 540.600037 l
250.73999 540.119995 l
250.73999 540.179993 l
250.800003 539.700012 l
250.73999 539.880005 l
251.039993 539.519958 l
250.979996 539.580017 l
251.339996 539.279968 l
251.220001 539.339966 l
251.699997 539.279968 l
251.639999 539.279968 l
252.119995 539.339966 l
251.939987 539.279968 l
252.300003 539.580017 l
252.23999 539.519958 l
252.479996 539.880005 l
252.419998 539.76001 l
252.539993 540.23999 l
252.539993 540.119995 l
252.419998 540.600037 l
252.479996 540.47998 l
252.23999 540.839966 l
252.300003 540.779968 l
251.939987 541.019958 l
252.059998 540.959961 l
251.580002 541.080017 l
251.699997 541.679993 l
252.179993 541.559998 l
252.300003 541.5 l
252.659988 541.26001 l
252.720001 541.200012 l
252.959991 540.839966 l
253.019989 540.719971 l
253.139999 540.23999 l
253.139999 540.119995 l
253.019989 539.640015 l
252.959991 539.519958 l
252.720001 539.159973 l
252.659988 539.100037 l
252.300003 538.799988 l
252.179993 538.73999 l
251.699997 538.679993 l
251.639999 538.679993 l
251.159988 538.73999 l
250.979996 538.799988 l
250.619995 539.100037 l
250.559998 539.159973 l
250.259995 539.519958 l
250.199997 539.640015 l
250.139999 540.119995 l
250.139999 540.179993 l
250.199997 540.659973 l
250.259995 540.839966 l
250.559998 541.200012 l
250.619995 541.26001 l
250.979996 541.5 l
251.100006 541.559998 l
251.580002 541.679993 l
f
n
251.580002 541.080017 m
251.699997 541.080017 l
251.580002 541.679993 l
251.699997 541.679993 l
f
132.419998 525.539978 m
(Clear)
[5.989567 2.488499 3.982502 3.982502 2.983433 ] pdfxs
n
242.850006 597.299988 m
242.850006 597.899963 l
0.300003 w
S
1.0 w
n
243.0 597.599976 m
252.0 597.599976 l
0.599976 w
S
1.0 w
n
241.919998 597.600037 m
241.919998 598.140015 l
241.919998 598.019958 l
241.860001 598.5 l
241.800003 599.039978 l
241.73999 599.580017 l
241.73999 599.519958 l
241.619995 600.0 l
241.619995 599.940002 l
241.439987 600.47998 l
241.5 600.419983 l
241.319992 600.900024 l
240.959991 601.859985 l
240.959991 601.799988 l
240.720001 602.219971 l
240.479996 602.700012 l
240.539993 602.579956 l
240.23999 603.0 l
239.939987 603.419983 l
240.0 603.419983 l
239.699997 603.779968 l
239.639999 603.779968 l
239.339996 604.200012 l
239.400009 604.140015 l
239.039993 604.5 l
239.100006 604.440002 l
238.73999 604.73999 l
238.319992 605.100037 l
237.959991 605.400024 l
238.019989 605.400024 l
237.600006 605.700012 l
237.179993 606.0 l
237.300003 605.940002 l
236.819992 606.179993 l
236.759995 606.179993 l
236.339996 606.419983 l
236.459991 606.359985 l
235.979996 606.539978 l
235.019989 606.900024 l
235.139999 606.900024 l
234.600006 607.019958 l
234.539993 607.019958 l
234.059998 607.140015 l
234.119995 607.140015 l
233.580002 607.26001 l
233.639999 607.200012 l
233.159988 607.26001 l
232.619995 607.320007 l
232.679993 607.320007 l
231.600006 607.320007 l
231.720001 607.320007 l
231.179993 607.26001 l
230.639999 607.200012 l
230.699997 607.26001 l
230.159988 607.140015 l
229.679993 607.019958 l
229.139999 606.900024 l
229.259995 606.900024 l
228.300003 606.539978 l
227.87999 606.359985 l
227.940002 606.419983 l
227.279999 607.73999 l
227.699997 607.919983 l
227.759995 607.919983 l
228.23999 608.100037 l
228.720001 608.279968 l
228.839996 608.339966 l
229.37999 608.459961 l
229.319992 608.459961 l
229.800003 608.579956 l
229.860001 608.579956 l
230.400009 608.700012 l
230.459991 608.700012 l
231.539993 608.820007 l
232.800003 608.820007 l
233.339996 608.76001 l
233.819992 608.700012 l
233.87999 608.700012 l
234.419998 608.579956 l
234.900009 608.459961 l
235.439987 608.339966 l
235.559998 608.279968 l
236.039993 608.100037 l
236.519989 607.919983 l
237.0 607.73999 l
237.059998 607.73999 l
237.479996 607.5 l
237.959991 607.26001 l
238.080002 607.200012 l
238.919998 606.600037 l
238.919998 606.539978 l
239.279999 606.23999 l
239.699997 605.880005 l
240.059998 605.579956 l
240.119995 605.579956 l
240.479996 605.219971 l
240.539993 605.100037 l
240.839996 604.679993 l
240.839996 604.73999 l
241.139999 604.380005 l
241.139999 604.320007 l
241.439987 603.900024 l
241.73999 603.47998 l
241.800003 603.359985 l
242.039993 602.880005 l
242.039993 602.940002 l
242.279999 602.519958 l
242.339996 602.400024 l
242.519989 601.919983 l
242.699997 601.440002 l
242.87999 600.959961 l
243.059998 600.419983 l
243.059998 600.359985 l
243.179993 599.880005 l
243.23999 599.76001 l
243.360001 598.679993 l
243.419998 598.200012 l
243.419998 597.600037 l
f
n
227.940002 606.419983 m
227.459991 606.179993 l
227.039993 605.940002 l
227.100006 605.940002 l
226.619995 605.640015 l
226.679993 605.700012 l
226.319992 605.400024 l
225.900009 605.100037 l
225.959991 605.159973 l
225.600006 604.799988 l
225.539993 604.73999 l
225.179993 604.440002 l
225.23999 604.5 l
224.87999 604.140015 l
224.940002 604.200012 l
224.580002 603.779968 l
224.279999 603.419983 l
223.979996 603.0 l
224.039993 603.119995 l
223.800003 602.700012 l
223.800003 602.640015 l
223.5 602.159973 l
223.5 602.219971 l
223.259995 601.799988 l
223.319992 601.859985 l
222.959991 600.900024 l
222.779999 600.419983 l
222.779999 600.539978 l
222.659988 600.0 l
222.539993 599.519958 l
222.419998 598.97998 l
222.479996 599.039978 l
222.419998 598.5 l
222.360001 598.019958 l
222.360001 598.140015 l
222.360001 597.0 l
222.360001 597.059998 l
222.419998 596.580017 l
222.479996 596.039978 l
222.419998 596.100037 l
222.539993 595.559998 l
222.539993 595.619995 l
222.659988 595.140015 l
222.659988 595.080017 l
222.779999 594.539978 l
222.779999 594.659973 l
222.959991 594.179993 l
223.139999 593.700012 l
223.319992 593.219971 l
223.259995 593.339966 l
223.5 592.919983 l
223.440002 592.97998 l
223.73999 592.559998 l
223.800003 592.440002 l
224.039993 591.959961 l
223.979996 592.140015 l
224.279999 591.779968 l
224.279999 591.719971 l
224.580002 591.299988 l
224.519989 591.419983 l
224.87999 591.059998 l
224.940002 591.0 l
225.300003 590.580017 l
225.179993 590.640015 l
225.539993 590.339966 l
225.600006 590.339966 l
225.959991 589.97998 l
225.900009 590.039978 l
225.0 588.839966 l
224.87999 588.900024 l
224.519989 589.26001 l
224.580002 589.200012 l
224.220001 589.5 l
224.159988 589.619995 l
223.800003 590.039978 l
223.800003 589.97998 l
223.440002 590.339966 l
223.37999 590.400024 l
223.080002 590.820007 l
223.139999 590.820007 l
222.839996 591.179993 l
222.720001 591.299988 l
222.479996 591.779968 l
222.539993 591.659973 l
222.23999 592.080017 l
222.179993 592.200012 l
221.940002 592.619995 l
221.940002 592.679993 l
221.580002 593.640015 l
221.400009 594.119995 l
221.339996 594.23999 l
221.220001 594.779968 l
221.100006 595.26001 l
220.979996 595.799988 l
220.979996 595.859985 l
220.919998 596.400024 l
220.860001 596.880005 l
220.860001 598.200012 l
220.919998 598.679993 l
220.979996 599.219971 l
220.979996 599.279968 l
221.100006 599.820007 l
221.100006 599.880005 l
221.220001 600.359985 l
221.220001 600.299988 l
221.339996 600.839966 l
221.400009 600.959961 l
221.580002 601.440002 l
221.759995 601.919983 l
221.940002 602.400024 l
221.940002 602.519958 l
222.179993 602.940002 l
222.23999 602.940002 l
222.539993 603.419983 l
222.479996 603.419983 l
222.720001 603.839966 l
222.779999 603.900024 l
223.080002 604.320007 l
223.139999 604.380005 l
223.440002 604.73999 l
223.800003 605.159973 l
223.800003 605.219971 l
224.159988 605.579956 l
224.220001 605.579956 l
224.580002 605.880005 l
224.519989 605.880005 l
224.87999 606.23999 l
225.0 606.299988 l
225.419998 606.600037 l
225.360001 606.539978 l
225.720001 606.839966 l
225.839996 606.900024 l
226.319992 607.200012 l
226.319992 607.26001 l
226.73999 607.5 l
226.800003 607.5 l
227.279999 607.73999 l
f
n
225.900009 590.039978 m
226.319992 589.73999 l
226.319992 589.679993 l
226.679993 589.380005 l
226.619995 589.440002 l
227.100006 589.140015 l
227.039993 589.200012 l
227.459991 588.959961 l
227.940002 588.719971 l
227.87999 588.719971 l
228.300003 588.539978 l
228.779999 588.359985 l
229.259995 588.179993 l
229.139999 588.23999 l
229.679993 588.119995 l
230.159988 588.0 l
230.699997 587.880005 l
230.639999 587.880005 l
231.179993 587.820007 l
231.720001 587.76001 l
231.600006 587.76001 l
232.679993 587.76001 l
232.619995 587.76001 l
233.159988 587.820007 l
233.639999 587.880005 l
233.580002 587.880005 l
234.119995 588.0 l
234.059998 588.0 l
234.539993 588.119995 l
234.600006 588.119995 l
235.139999 588.23999 l
235.019989 588.179993 l
235.5 588.359985 l
235.979996 588.539978 l
236.459991 588.719971 l
236.339996 588.719971 l
236.759995 588.959961 l
236.819992 588.959961 l
237.300003 589.200012 l
237.179993 589.140015 l
237.600006 589.440002 l
238.019989 589.73999 l
237.959991 589.679993 l
238.319992 589.97998 l
238.73999 590.339966 l
239.100006 590.640015 l
239.039993 590.580017 l
239.400009 591.0 l
239.699997 591.359985 l
239.639999 591.299988 l
239.939987 591.719971 l
240.0 591.779968 l
240.300003 592.140015 l
240.23999 592.019958 l
240.539993 592.5 l
240.479996 592.5 l
240.720001 592.919983 l
240.959991 593.339966 l
240.959991 593.219971 l
241.139999 593.700012 l
241.319992 594.179993 l
241.5 594.659973 l
241.439987 594.659973 l
241.619995 595.200012 l
241.619995 595.140015 l
243.059998 594.779968 l
243.059998 594.719971 l
242.87999 594.179993 l
242.87999 594.119995 l
242.519989 593.159973 l
242.339996 592.679993 l
242.279999 592.619995 l
242.039993 592.200012 l
241.800003 591.779968 l
241.800003 591.719971 l
241.5 591.23999 l
241.439987 591.179993 l
241.139999 590.820007 l
240.839996 590.400024 l
240.539993 590.039978 l
240.179993 589.619995 l
240.059998 589.5 l
239.699997 589.200012 l
239.279999 588.839966 l
238.919998 588.539978 l
238.5 588.23999 l
238.080002 587.940002 l
237.959991 587.880005 l
237.479996 587.640015 l
237.059998 587.400024 l
237.0 587.339966 l
236.519989 587.159973 l
236.039993 586.97998 l
235.559998 586.799988 l
235.439987 586.799988 l
234.900009 586.679993 l
234.419998 586.559998 l
233.87999 586.440002 l
233.819992 586.380005 l
233.339996 586.320007 l
232.800003 586.26001 l
231.539993 586.26001 l
230.459991 586.380005 l
230.400009 586.440002 l
229.860001 586.559998 l
229.800003 586.559998 l
229.319992 586.679993 l
229.37999 586.679993 l
228.839996 586.799988 l
228.720001 586.799988 l
228.23999 586.97998 l
227.759995 587.159973 l
227.699997 587.159973 l
227.279999 587.339966 l
227.279999 587.400024 l
226.800003 587.640015 l
226.73999 587.640015 l
226.319992 587.880005 l
225.839996 588.179993 l
225.720001 588.23999 l
225.360001 588.539978 l
225.419998 588.539978 l
225.0 588.839966 l
f
n
241.619995 595.140015 m
241.73999 595.619995 l
241.73999 595.5 l
241.800003 596.039978 l
241.860001 596.580017 l
241.919998 597.059998 l
241.919998 597.0 l
241.919998 597.600037 l
243.419998 597.600037 l
243.419998 596.880005 l
243.360001 596.400024 l
243.300003 595.859985 l
243.23999 595.320007 l
243.179993 595.26001 l
243.059998 594.779968 l
f
n
220.440002 587.039978 12.479996 21.059998 re
1.0  sg
f
n
219.720001 608.070007 m
232.919998 608.070007 l
1.5 w
0.0  sg
S
1.0 w
n
220.470001 586.26001 m
220.470001 608.099976 l
1.5 w
S
1.0 w
n
220.440002 587.01001 m
232.919998 587.01001 l
1.5 w
S
1.0 w
n
248.220001 597.599976 m
252.0 597.599976 l
0.599976 w
S
1.0 w
n
251.700012 597.600037 m
251.700012 616.980042 l
0.600006 w
S
1.0 w
n
251.699997 616.680054 m
302.880005 616.680054 l
0.600037 w
S
1.0 w
n
302.580017 603.659973 m
302.580017 616.679993 l
0.600006 w
S
1.0 w
n
302.579987 603.959961 m
309.419983 603.959961 l
0.599976 w
S
1.0 w
n
213.119995 603.959961 m
220.080002 603.959961 l
0.599976 w
S
1.0 w
n
213.419983 603.959961 m
213.419983 616.97998 l
0.599991 w
S
1.0 w
n
162.119995 616.680054 m
213.419998 616.680054 l
0.600037 w
S
1.0 w
n
162.419998 590.880005 m
162.419998 616.679993 l
0.600006 w
S
1.0 w
n
187.919983 548.459961 m
187.919983 548.759949 l
0.599991 w
S
1.0 w
n
187.919983 527.100037 m
187.919983 548.460022 l
0.599991 w
S
1.0 w
n
277.859985 548.400024 m
277.859985 548.700012 l
0.600006 w
S
1.0 w
n
277.859985 527.100037 m
277.859985 548.400024 l
0.600006 w
S
1.0 w
n
456.299988 527.100037 m
456.299988 527.700012 l
0.600006 w
S
1.0 w
n
155.699997 527.400024 m
456.299988 527.400024 l
0.599976 w
S
1.0 w
n
187.919998 528.600037 m
187.440002 528.539978 l
187.080002 528.23999 l
186.779999 527.880005 l
186.720001 527.400024 l
186.779999 526.919983 l
187.080002 526.559998 l
187.440002 526.320007 l
187.919998 526.200012 l
188.400009 526.320007 l
188.759995 526.559998 l
189.0 526.919983 l
189.119995 527.400024 l
189.0 527.880005 l
188.759995 528.23999 l
188.400009 528.539978 l
187.919998 528.600037 l
eofill
n
187.979996 528.299988 m
187.5 528.23999 l
187.619995 528.299988 l
187.259995 528.0 l
187.319992 528.059998 l
187.019989 527.700012 l
187.080002 527.820007 l
187.019989 527.339966 l
187.019989 527.400024 l
187.080002 526.919983 l
187.019989 527.100037 l
187.319992 526.73999 l
187.259995 526.799988 l
187.619995 526.559998 l
187.5 526.619995 l
187.979996 526.5 l
187.860001 526.5 l
188.339996 526.619995 l
188.220001 526.559998 l
188.580002 526.799988 l
188.519989 526.73999 l
188.759995 527.100037 l
188.699997 526.97998 l
188.819992 527.459961 l
188.819992 527.339966 l
188.699997 527.820007 l
188.759995 527.700012 l
188.519989 528.059998 l
188.580002 528.0 l
188.220001 528.299988 l
188.400009 528.23999 l
187.919998 528.299988 l
187.979996 528.900024 l
188.459991 528.839966 l
188.580002 528.779968 l
188.940002 528.47998 l
189.0 528.419983 l
189.23999 528.059998 l
189.300003 527.940002 l
189.419998 527.459961 l
189.419998 527.339966 l
189.300003 526.859985 l
189.23999 526.73999 l
189.0 526.380005 l
188.940002 526.320007 l
188.580002 526.080017 l
188.459991 526.019958 l
187.979996 525.900024 l
187.860001 525.900024 l
187.37999 526.019958 l
187.259995 526.080017 l
186.900009 526.320007 l
186.839996 526.380005 l
186.539993 526.73999 l
186.479996 526.859985 l
186.419998 527.339966 l
186.419998 527.400024 l
186.479996 527.880005 l
186.539993 528.059998 l
186.839996 528.419983 l
186.900009 528.47998 l
187.259995 528.779968 l
187.440002 528.839966 l
187.919998 528.900024 l
f
n
187.919998 528.299988 m
187.979996 528.299988 l
187.919998 528.900024 l
187.979996 528.900024 l
f
n
277.859985 528.600037 m
277.380005 528.539978 l
277.019989 528.23999 l
276.720001 527.880005 l
276.660004 527.400024 l
276.720001 526.919983 l
277.019989 526.559998 l
277.380005 526.320007 l
277.859985 526.200012 l
278.339996 526.320007 l
278.700012 526.559998 l
278.940002 526.919983 l
279.059998 527.400024 l
278.940002 527.880005 l
278.700012 528.23999 l
278.339996 528.539978 l
277.859985 528.600037 l
eofill
n
277.919983 528.299988 m
277.440002 528.23999 l
277.559998 528.299988 l
277.200012 528.0 l
277.259979 528.059998 l
276.959991 527.700012 l
277.019989 527.820007 l
276.959991 527.339966 l
276.959991 527.400024 l
277.019989 526.919983 l
276.959991 527.100037 l
277.259979 526.73999 l
277.200012 526.799988 l
277.559998 526.559998 l
277.440002 526.619995 l
277.919983 526.5 l
277.800018 526.5 l
278.279999 526.619995 l
278.160004 526.559998 l
278.519989 526.799988 l
278.459991 526.73999 l
278.700012 527.100037 l
278.639984 526.97998 l
278.759979 527.459961 l
278.759979 527.339966 l
278.639984 527.820007 l
278.700012 527.700012 l
278.459991 528.059998 l
278.519989 528.0 l
278.160004 528.299988 l
278.339996 528.23999 l
277.859985 528.299988 l
277.919983 528.900024 l
278.399994 528.839966 l
278.519989 528.779968 l
278.880005 528.47998 l
278.940002 528.419983 l
279.179993 528.059998 l
279.23999 527.940002 l
279.359985 527.459961 l
279.359985 527.339966 l
279.23999 526.859985 l
279.179993 526.73999 l
278.940002 526.380005 l
278.880005 526.320007 l
278.519989 526.080017 l
278.399994 526.019958 l
277.919983 525.900024 l
277.800018 525.900024 l
277.320007 526.019958 l
277.200012 526.080017 l
276.839996 526.320007 l
276.779999 526.380005 l
276.47998 526.73999 l
276.419983 526.859985 l
276.359985 527.339966 l
276.359985 527.400024 l
276.419983 527.880005 l
276.47998 528.059998 l
276.779999 528.419983 l
276.839996 528.47998 l
277.200012 528.779968 l
277.380005 528.839966 l
277.859985 528.900024 l
f
n
277.859985 528.299988 m
277.919983 528.299988 l
277.859985 528.900024 l
277.919983 528.900024 l
f
n
277.859985 552.959961 m
277.380005 552.900024 l
276.959991 552.779968 l
276.600006 552.600037 l
276.300018 552.299988 l
276.0 552.0 l
275.820007 551.580017 l
275.639984 551.159973 l
275.639984 550.26001 l
275.820007 549.839966 l
276.0 549.47998 l
276.300018 549.119995 l
276.600006 548.880005 l
276.959991 548.700012 l
277.380005 548.519958 l
278.279999 548.519958 l
278.700012 548.700012 l
279.119995 548.880005 l
279.419983 549.119995 l
279.720001 549.47998 l
279.899994 549.839966 l
280.019989 550.26001 l
280.079987 550.73999 l
280.019989 551.159973 l
279.899994 551.580017 l
279.720001 552.0 l
279.419983 552.299988 l
279.119995 552.600037 l
278.700012 552.779968 l
278.279999 552.900024 l
277.859985 552.959961 l
1.0  sg
eofill
n
277.919983 552.659973 m
277.440002 552.600037 l
277.5 552.600037 l
277.079987 552.47998 l
276.720001 552.299988 l
276.839996 552.359985 l
276.540009 552.059998 l
276.23999 551.76001 l
276.300018 551.880005 l
275.940002 551.039978 l
275.940002 551.159973 l
275.940002 550.26001 l
275.940002 550.380005 l
276.119995 549.959961 l
276.300018 549.600037 l
276.23999 549.659973 l
276.540009 549.299988 l
276.47998 549.359985 l
276.779999 549.119995 l
276.720001 549.119995 l
277.079987 548.940002 l
277.5 548.76001 l
277.380005 548.820007 l
278.279999 548.820007 l
278.160004 548.76001 l
278.579987 548.940002 l
279.0 549.119995 l
278.940002 549.119995 l
279.23999 549.359985 l
279.179993 549.299988 l
279.47998 549.659973 l
279.47998 549.600037 l
279.660004 549.959961 l
279.600006 549.900024 l
279.720001 550.320007 l
279.720001 550.26001 l
279.779999 550.73999 l
279.779999 550.679993 l
279.720001 551.100037 l
279.720001 551.039978 l
279.600006 551.459961 l
279.660004 551.459961 l
279.47998 551.880005 l
279.540009 551.76001 l
279.23999 552.059998 l
278.940002 552.359985 l
279.0 552.299988 l
278.579987 552.47998 l
278.639984 552.47998 l
278.220001 552.600037 l
278.279999 552.600037 l
277.859985 552.659973 l
277.919983 553.26001 l
278.339996 553.200012 l
278.399994 553.200012 l
278.820007 553.080017 l
278.820007 553.019958 l
279.23999 552.839966 l
279.359985 552.779968 l
279.959991 552.179993 l
280.019989 552.119995 l
280.200012 551.700012 l
280.200012 551.640015 l
280.320007 551.219971 l
280.320007 551.159973 l
280.380005 550.73999 l
280.380005 550.679993 l
280.320007 550.200012 l
280.320007 550.140015 l
280.200012 549.719971 l
280.019989 549.359985 l
279.959991 549.299988 l
279.660004 548.940002 l
279.600006 548.880005 l
279.300018 548.640015 l
279.23999 548.580017 l
278.820007 548.400024 l
278.399994 548.219971 l
277.259979 548.219971 l
276.839996 548.400024 l
276.47998 548.580017 l
276.419983 548.640015 l
276.119995 548.880005 l
276.059998 548.940002 l
275.759979 549.299988 l
275.759979 549.359985 l
275.579987 549.719971 l
275.399994 550.140015 l
275.339996 550.26001 l
275.339996 551.159973 l
275.399994 551.279968 l
275.579987 551.700012 l
275.759979 552.119995 l
275.820007 552.179993 l
276.119995 552.47998 l
276.419983 552.779968 l
276.47998 552.839966 l
276.839996 553.019958 l
276.899994 553.080017 l
277.320007 553.200012 l
277.380005 553.200012 l
277.859985 553.26001 l
0.0  sg
f
n
277.859985 552.659973 m
277.919983 552.659973 l
277.859985 553.26001 l
277.919983 553.26001 l
f
n
187.919998 552.959961 m
187.440002 552.900024 l
187.019989 552.779968 l
186.659988 552.600037 l
186.360001 552.299988 l
186.059998 552.0 l
185.87999 551.580017 l
185.699997 551.159973 l
185.699997 550.26001 l
185.87999 549.839966 l
186.059998 549.47998 l
186.360001 549.119995 l
186.659988 548.880005 l
187.019989 548.700012 l
187.440002 548.519958 l
188.339996 548.519958 l
189.179993 548.880005 l
189.479996 549.119995 l
189.779999 549.47998 l
189.959991 549.839966 l
190.080002 550.26001 l
190.139999 550.73999 l
190.080002 551.159973 l
189.959991 551.580017 l
189.779999 552.0 l
189.479996 552.299988 l
189.179993 552.600037 l
188.759995 552.779968 l
188.339996 552.900024 l
187.919998 552.959961 l
1.0  sg
eofill
n
187.979996 552.659973 m
187.5 552.600037 l
187.559998 552.600037 l
187.139999 552.47998 l
186.779999 552.299988 l
186.900009 552.359985 l
186.600006 552.059998 l
186.300003 551.76001 l
186.360001 551.880005 l
186.0 551.039978 l
186.0 551.159973 l
186.0 550.26001 l
186.0 550.380005 l
186.179993 549.959961 l
186.360001 549.600037 l
186.300003 549.659973 l
186.600006 549.299988 l
186.539993 549.359985 l
186.839996 549.119995 l
186.779999 549.119995 l
187.139999 548.940002 l
187.559998 548.76001 l
187.440002 548.820007 l
188.339996 548.820007 l
188.220001 548.76001 l
188.639999 548.940002 l
189.059998 549.119995 l
189.0 549.119995 l
189.300003 549.359985 l
189.23999 549.299988 l
189.539993 549.659973 l
189.539993 549.600037 l
189.720001 549.959961 l
189.659988 549.900024 l
189.779999 550.320007 l
189.779999 550.26001 l
189.839996 550.73999 l
189.839996 550.679993 l
189.779999 551.100037 l
189.779999 551.039978 l
189.659988 551.459961 l
189.720001 551.459961 l
189.539993 551.880005 l
189.600006 551.76001 l
189.300003 552.059998 l
189.0 552.359985 l
189.059998 552.299988 l
188.639999 552.47998 l
188.699997 552.47998 l
188.279999 552.600037 l
188.339996 552.600037 l
187.919998 552.659973 l
187.979996 553.26001 l
188.400009 553.200012 l
188.459991 553.200012 l
188.87999 553.080017 l
188.87999 553.019958 l
189.300003 552.839966 l
189.419998 552.779968 l
189.720001 552.47998 l
190.019989 552.179993 l
190.080002 552.119995 l
190.259995 551.700012 l
190.259995 551.640015 l
190.37999 551.219971 l
190.37999 551.159973 l
190.440002 550.73999 l
190.440002 550.679993 l
190.37999 550.200012 l
190.37999 550.140015 l
190.259995 549.719971 l
190.080002 549.359985 l
190.019989 549.299988 l
189.720001 548.940002 l
189.659988 548.880005 l
189.360001 548.640015 l
189.300003 548.580017 l
188.87999 548.400024 l
188.459991 548.219971 l
187.319992 548.219971 l
186.900009 548.400024 l
186.539993 548.580017 l
186.479996 548.640015 l
186.179993 548.880005 l
186.119995 548.940002 l
185.819992 549.299988 l
185.819992 549.359985 l
185.639999 549.719971 l
185.459991 550.140015 l
185.400009 550.26001 l
185.400009 551.159973 l
185.459991 551.279968 l
185.819992 552.119995 l
185.87999 552.179993 l
186.479996 552.779968 l
186.539993 552.839966 l
186.900009 553.019958 l
186.959991 553.080017 l
187.37999 553.200012 l
187.440002 553.200012 l
187.919998 553.26001 l
0.0  sg
f
n
187.919998 552.659973 m
187.979996 552.659973 l
187.919998 553.26001 l
187.979996 553.26001 l
f
n
351.119995 552.779968 31.920013 51.059998 re
1.0  sg
f
n
351.119995 603.809998 m
383.820007 603.809998 l
1.5 w
0.0  sg
S
1.0 w
n
383.069977 552.0 m
383.069977 603.839966 l
1.5 w
S
1.0 w
n
350.399994 552.75 m
383.039978 552.75 l
1.5 w
S
1.0 w
n
351.149994 552.779968 m
351.149994 604.559937 l
1.5 w
S
1.0 w
354.300018 588.180115 m
(T) show
373.080322 588.5401 m
(Q) show
372.720337 562.980103 m
(Q) show
n
373.529999 570.779968 m
373.529999 571.199951 l
0.179993 w
S
1.0 w
n
373.619995 570.98999 m
378.47998 570.98999 l
0.419983 w
S
1.0 w
n
351.23999 568.97998 m
351.0 569.100037 l
350.759979 568.559998 l
351.0 568.440002 l
f
n
351.23999 568.97998 m
351.0 568.440002 l
357.419983 565.26001 l
357.660004 565.26001 l
358.259979 565.559998 l
357.660004 565.799988 l
f
n
351.23999 562.080017 m
351.0 561.959961 l
350.759979 562.5 l
351.0 562.619995 l
f
n
357.660004 565.26001 m
357.419983 565.799988 l
351.0 562.619995 l
351.23999 562.080017 l
f
n
398.48999 590.76001 m
398.48999 591.359985 l
0.300018 w
S
1.0 w
n
382.73999 591.059998 m
398.339996 591.059998 l
0.599976 w
S
1.0 w
n
340.710022 590.76001 m
340.710022 591.359985 l
0.300018 w
S
1.0 w
n
340.859985 591.059998 m
350.820007 591.059998 l
0.599976 w
S
1.0 w
n
340.559998 565.559998 m
350.820007 565.559998 l
0.599976 w
S
1.0 w
n
340.859985 539.76001 m
340.859985 565.559998 l
0.600006 w
S
1.0 w
n
340.859985 598.619995 m
340.380005 598.559998 l
340.019989 598.320007 l
339.720001 597.900024 l
339.660004 597.419983 l
339.720001 597.0 l
340.019989 596.580017 l
340.380005 596.339966 l
340.859985 596.219971 l
341.339996 596.339966 l
341.700012 596.580017 l
341.940002 597.0 l
342.059998 597.419983 l
341.940002 597.900024 l
341.700012 598.320007 l
341.339996 598.559998 l
340.859985 598.619995 l
eofill
n
340.919983 598.320007 m
340.440002 598.26001 l
340.559998 598.320007 l
340.200012 598.080017 l
340.259979 598.140015 l
339.959991 597.719971 l
340.019989 597.839966 l
339.959991 597.359985 l
339.959991 597.419983 l
340.019989 597.0 l
339.959991 597.179993 l
340.259979 596.76001 l
340.200012 596.820007 l
340.559998 596.580017 l
340.440002 596.640015 l
340.919983 596.519958 l
340.800018 596.519958 l
341.279999 596.640015 l
341.160004 596.580017 l
341.519989 596.820007 l
341.459991 596.700012 l
341.700012 597.119995 l
341.639984 597.059998 l
341.759979 597.47998 l
341.759979 597.359985 l
341.639984 597.839966 l
341.700012 597.719971 l
341.459991 598.140015 l
341.519989 598.080017 l
341.160004 598.320007 l
341.339996 598.26001 l
340.859985 598.320007 l
340.919983 598.919983 l
341.399994 598.859985 l
341.519989 598.799988 l
341.880005 598.559998 l
342.0 598.440002 l
342.23999 598.019958 l
342.23999 597.959961 l
342.359985 597.47998 l
342.359985 597.299988 l
342.23999 596.880005 l
342.23999 596.820007 l
342.0 596.400024 l
341.880005 596.339966 l
341.519989 596.100037 l
341.399994 596.039978 l
340.919983 595.919983 l
340.800018 595.919983 l
340.320007 596.039978 l
340.200012 596.100037 l
339.839996 596.339966 l
339.779999 596.400024 l
339.47998 596.820007 l
339.419983 596.940002 l
339.359985 597.359985 l
339.359985 597.419983 l
339.419983 597.900024 l
339.47998 598.080017 l
339.779999 598.5 l
339.839996 598.559998 l
340.200012 598.799988 l
340.380005 598.859985 l
340.859985 598.919983 l
f
n
340.859985 598.320007 m
340.919983 598.320007 l
340.859985 598.919983 l
340.919983 598.919983 l
f
n
340.859985 541.26001 m
340.380005 541.140015 l
340.019989 540.900024 l
339.720001 540.47998 l
339.660004 540.059998 l
339.720001 539.580017 l
340.019989 539.159973 l
340.380005 538.919983 l
340.859985 538.859985 l
341.339996 538.919983 l
341.700012 539.159973 l
341.940002 539.580017 l
342.059998 540.059998 l
341.940002 540.47998 l
341.700012 540.900024 l
341.339996 541.140015 l
340.859985 541.26001 l
eofill
n
340.919983 540.959961 m
340.440002 540.839966 l
340.559998 540.900024 l
340.200012 540.659973 l
340.259979 540.719971 l
339.959991 540.299988 l
340.019989 540.419983 l
339.959991 540.0 l
339.959991 540.059998 l
340.019989 539.580017 l
339.959991 539.76001 l
340.259979 539.339966 l
340.200012 539.400024 l
340.559998 539.159973 l
340.440002 539.219971 l
340.919983 539.159973 l
340.859985 539.159973 l
341.339996 539.219971 l
341.160004 539.159973 l
341.519989 539.400024 l
341.459991 539.279968 l
341.700012 539.700012 l
341.639984 539.640015 l
341.759979 540.119995 l
341.759979 539.940002 l
341.639984 540.359985 l
341.700012 540.299988 l
341.459991 540.719971 l
341.519989 540.659973 l
341.160004 540.900024 l
341.279999 540.839966 l
340.800018 540.959961 l
340.919983 541.559998 l
341.399994 541.440002 l
341.519989 541.380005 l
341.880005 541.140015 l
342.0 541.019958 l
342.23999 540.600037 l
342.23999 540.539978 l
342.359985 540.119995 l
342.359985 540.0 l
342.23999 539.519958 l
342.23999 539.400024 l
342.0 538.97998 l
341.880005 538.919983 l
341.519989 538.679993 l
341.399994 538.619995 l
340.919983 538.559998 l
340.859985 538.559998 l
340.380005 538.619995 l
340.200012 538.679993 l
339.839996 538.919983 l
339.779999 538.97998 l
339.47998 539.400024 l
339.419983 539.519958 l
339.359985 540.0 l
339.359985 540.059998 l
339.419983 540.47998 l
339.47998 540.659973 l
339.779999 541.080017 l
339.839996 541.140015 l
340.200012 541.380005 l
340.320007 541.440002 l
340.800018 541.559998 l
f
n
340.800018 540.959961 m
340.919983 540.959961 l
340.800018 541.559998 l
340.919983 541.559998 l
f
n
332.129974 597.119995 m
332.129974 597.720032 l
0.299988 w
S
1.0 w
n
332.279999 597.420044 m
341.220001 597.420044 l
0.600037 w
S
1.0 w
n
331.139984 597.419983 m
331.139984 597.959961 l
331.139984 597.839966 l
331.079987 598.380005 l
331.019989 598.919983 l
330.959991 599.459961 l
330.959991 599.400024 l
330.839996 599.880005 l
330.839996 599.820007 l
330.660004 600.359985 l
330.660004 600.419983 l
330.539978 600.900024 l
330.600006 600.719971 l
330.359985 601.200012 l
330.359985 601.26001 l
330.179993 601.679993 l
330.179993 601.619995 l
329.940002 602.100037 l
329.700012 602.519958 l
329.759979 602.400024 l
329.459991 602.820007 l
329.160004 603.23999 l
328.859985 603.659973 l
328.919983 603.659973 l
328.619995 604.019958 l
328.619995 603.959961 l
328.259979 604.320007 l
327.899994 604.679993 l
327.959991 604.619995 l
327.539978 604.97998 l
327.179993 605.279968 l
327.23999 605.279968 l
326.820007 605.579956 l
326.880005 605.519958 l
326.459991 605.76001 l
325.97998 606.059998 l
325.559998 606.299988 l
325.679993 606.23999 l
325.200012 606.419983 l
324.23999 606.779968 l
324.300018 606.779968 l
323.820007 606.900024 l
323.880005 606.900024 l
322.800018 607.140015 l
322.859985 607.079956 l
322.380005 607.140015 l
321.839996 607.200012 l
321.899994 607.200012 l
320.820007 607.200012 l
320.940002 607.200012 l
320.399994 607.140015 l
319.859985 607.079956 l
319.919983 607.140015 l
319.380005 607.019958 l
318.899994 606.900024 l
318.419983 606.779968 l
318.47998 606.779968 l
317.940002 606.600037 l
318.0 606.600037 l
317.519989 606.419983 l
317.100006 606.23999 l
317.160004 606.299988 l
316.5 607.619995 l
316.919983 607.799988 l
316.97998 607.799988 l
317.459991 607.97998 l
317.459991 608.039978 l
318.0 608.219971 l
318.059998 608.219971 l
318.539978 608.339966 l
319.019989 608.459961 l
319.079987 608.459961 l
319.619995 608.579956 l
319.679993 608.579956 l
320.759979 608.700012 l
322.019989 608.700012 l
322.559998 608.640015 l
323.039978 608.579956 l
323.100006 608.579956 l
323.639984 608.459961 l
324.179993 608.339966 l
324.660004 608.219971 l
324.779999 608.159973 l
325.259979 607.97998 l
325.73999 607.799988 l
326.220001 607.619995 l
326.279999 607.619995 l
326.700012 607.380005 l
326.759979 607.320007 l
327.23999 607.019958 l
327.179993 607.079956 l
327.600006 606.839966 l
327.720001 606.779968 l
328.139984 606.47998 l
328.139984 606.419983 l
328.5 606.119995 l
328.919983 605.76001 l
328.97998 605.76001 l
329.339996 605.400024 l
329.700012 605.039978 l
329.759979 604.97998 l
330.059998 604.619995 l
330.059998 604.559998 l
330.359985 604.140015 l
330.959991 603.299988 l
331.019989 603.23999 l
331.259979 602.820007 l
331.259979 602.76001 l
331.5 602.279968 l
331.559998 602.279968 l
331.73999 601.859985 l
331.679993 601.859985 l
331.919983 601.380005 l
331.97998 601.26001 l
332.100006 600.779968 l
332.100006 600.839966 l
332.279999 600.299988 l
332.279999 600.23999 l
332.399994 599.76001 l
332.459991 599.640015 l
332.579987 598.559998 l
332.639984 598.019958 l
332.639984 597.419983 l
f
n
317.160004 606.299988 m
316.679993 606.059998 l
316.800018 606.119995 l
316.380005 605.820007 l
316.259979 605.76001 l
315.839996 605.519958 l
315.959991 605.579956 l
315.539978 605.279968 l
315.119995 604.97998 l
315.179993 605.039978 l
314.820007 604.679993 l
314.459991 604.320007 l
314.100006 603.959961 l
313.73999 603.600037 l
313.800018 603.659973 l
313.5 603.23999 l
313.200012 602.820007 l
313.259979 602.940002 l
313.019989 602.519958 l
312.959991 602.400024 l
312.660004 601.97998 l
312.779999 602.159973 l
312.600006 601.679993 l
312.539978 601.619995 l
312.300018 601.200012 l
312.359985 601.26001 l
312.179993 600.779968 l
312.0 600.299988 l
312.0 600.419983 l
311.880005 599.880005 l
311.759979 599.400024 l
311.639984 598.859985 l
311.700012 598.919983 l
311.639984 598.380005 l
311.579987 597.839966 l
311.579987 597.959961 l
311.579987 596.880005 l
311.579987 596.940002 l
311.639984 596.400024 l
311.700012 595.919983 l
311.639984 595.97998 l
311.759979 595.440002 l
311.759979 595.5 l
311.880005 595.019958 l
311.880005 594.959961 l
312.0 594.419983 l
312.0 594.539978 l
312.179993 594.059998 l
312.359985 593.580017 l
312.300018 593.640015 l
312.539978 593.159973 l
312.600006 593.159973 l
312.779999 592.73999 l
312.720001 592.799988 l
313.019989 592.320007 l
313.259979 591.900024 l
313.200012 591.959961 l
313.5 591.539978 l
313.5 591.600037 l
313.800018 591.23999 l
314.160004 590.820007 l
314.100006 590.880005 l
314.459991 590.519958 l
314.820007 590.159973 l
314.759979 590.159973 l
315.119995 589.859985 l
315.119995 589.919983 l
314.220001 588.719971 l
314.160004 588.719971 l
313.800018 589.019958 l
313.380005 589.440002 l
313.019989 589.799988 l
313.019989 589.859985 l
312.660004 590.279968 l
312.359985 590.640015 l
312.300018 590.640015 l
312.0 591.059998 l
311.940002 591.179993 l
311.700012 591.600037 l
311.759979 591.539978 l
311.459991 592.019958 l
311.399994 592.140015 l
311.220001 592.559998 l
311.220001 592.5 l
310.97998 592.97998 l
310.97998 593.039978 l
310.800018 593.519958 l
310.619995 594.0 l
310.559998 594.119995 l
310.440002 594.659973 l
310.320007 595.140015 l
310.200012 595.679993 l
310.200012 595.73999 l
310.139984 596.219971 l
310.079987 596.76001 l
310.079987 598.019958 l
310.139984 598.559998 l
310.200012 599.100037 l
310.200012 599.159973 l
310.320007 599.700012 l
310.320007 599.76001 l
310.440002 600.23999 l
310.440002 600.179993 l
310.559998 600.719971 l
310.619995 600.839966 l
310.800018 601.320007 l
310.97998 601.799988 l
310.97998 601.919983 l
311.220001 602.339966 l
311.220001 602.219971 l
311.399994 602.700012 l
311.459991 602.880005 l
311.759979 603.299988 l
311.700012 603.23999 l
311.940002 603.659973 l
312.0 603.719971 l
312.300018 604.140015 l
312.600006 604.559998 l
312.660004 604.679993 l
313.019989 605.039978 l
313.380005 605.400024 l
313.73999 605.76001 l
314.100006 606.119995 l
314.220001 606.179993 l
314.639984 606.47998 l
315.059998 606.779968 l
315.119995 606.839966 l
315.539978 607.079956 l
315.47998 607.019958 l
315.899994 607.320007 l
316.019989 607.380005 l
316.5 607.619995 l
f
n
315.119995 589.919983 m
315.539978 589.619995 l
315.959991 589.320007 l
316.380005 589.019958 l
316.259979 589.080017 l
316.679993 588.839966 l
317.160004 588.600037 l
317.100006 588.600037 l
317.519989 588.419983 l
318.0 588.23999 l
317.940002 588.299988 l
318.47998 588.119995 l
318.539978 588.059998 l
319.019989 587.880005 l
318.899994 587.940002 l
319.380005 587.820007 l
319.320007 587.820007 l
319.859985 587.76001 l
320.399994 587.700012 l
320.940002 587.640015 l
320.820007 587.640015 l
321.899994 587.640015 l
321.839996 587.640015 l
322.380005 587.700012 l
322.859985 587.76001 l
323.399994 587.820007 l
323.339996 587.820007 l
323.880005 587.940002 l
323.759979 587.880005 l
324.23999 588.059998 l
324.720001 588.23999 l
325.200012 588.419983 l
325.679993 588.600037 l
325.559998 588.600037 l
325.97998 588.839966 l
326.039978 588.839966 l
326.519989 589.080017 l
326.399994 589.019958 l
326.820007 589.320007 l
327.23999 589.619995 l
327.179993 589.559998 l
327.539978 589.859985 l
327.600006 589.919983 l
328.019989 590.219971 l
327.899994 590.159973 l
328.259979 590.519958 l
328.619995 590.880005 l
328.559998 590.76001 l
328.859985 591.179993 l
328.919983 591.23999 l
329.220001 591.600037 l
329.160004 591.539978 l
329.459991 591.959961 l
329.759979 592.380005 l
329.700012 592.26001 l
329.940002 592.73999 l
329.940002 592.799988 l
330.179993 593.219971 l
330.179993 593.100037 l
330.359985 593.580017 l
330.359985 593.640015 l
330.600006 594.119995 l
330.539978 594.0 l
330.660004 594.47998 l
330.660004 594.539978 l
330.839996 595.080017 l
330.839996 595.019958 l
332.279999 594.659973 l
332.279999 594.600037 l
332.100006 594.059998 l
332.100006 594.119995 l
331.97998 593.640015 l
331.919983 593.459961 l
331.679993 592.97998 l
331.73999 593.039978 l
331.559998 592.559998 l
331.5 592.5 l
331.259979 592.080017 l
331.019989 591.600037 l
330.959991 591.47998 l
330.660004 591.059998 l
330.359985 590.640015 l
330.059998 590.279968 l
329.759979 589.859985 l
329.700012 589.799988 l
329.339996 589.440002 l
328.919983 589.019958 l
328.5 588.719971 l
328.139984 588.419983 l
327.720001 588.119995 l
327.300018 587.820007 l
326.700012 587.519958 l
326.279999 587.279968 l
326.220001 587.219971 l
325.73999 587.039978 l
325.259979 586.859985 l
324.779999 586.679993 l
324.300018 586.5 l
324.179993 586.5 l
323.639984 586.380005 l
323.579987 586.320007 l
323.039978 586.26001 l
322.559998 586.200012 l
322.019989 586.140015 l
320.759979 586.140015 l
319.679993 586.26001 l
319.139984 586.320007 l
319.019989 586.380005 l
318.539978 586.5 l
318.47998 586.5 l
318.0 586.679993 l
317.459991 586.859985 l
316.97998 587.039978 l
316.919983 587.039978 l
316.5 587.219971 l
316.5 587.279968 l
316.019989 587.519958 l
315.959991 587.519958 l
315.539978 587.76001 l
315.47998 587.820007 l
315.059998 588.119995 l
314.639984 588.419983 l
314.220001 588.719971 l
f
n
330.839996 595.019958 m
330.959991 595.5 l
330.959991 595.380005 l
331.019989 595.919983 l
331.079987 596.400024 l
331.139984 596.940002 l
331.139984 596.880005 l
331.139984 597.419983 l
332.639984 597.419983 l
332.639984 596.76001 l
332.579987 596.219971 l
332.519989 595.73999 l
332.459991 595.200012 l
332.399994 595.140015 l
332.279999 594.659973 l
f
n
309.720001 586.919983 12.420013 21.059998 re
1.0  sg
f
n
309.0 607.950012 m
322.140015 607.950012 l
1.5 w
0.0  sg
S
1.0 w
n
309.75 586.140015 m
309.75 607.97998 l
1.5 w
S
1.0 w
n
309.720001 586.890015 m
322.140015 586.890015 l
1.5 w
S
1.0 w
n
337.440002 597.420044 m
341.220001 597.420044 l
0.600037 w
S
1.0 w
n
340.919983 597.419983 m
340.919983 616.859985 l
0.600006 w
S
1.0 w
n
340.919983 616.559998 m
392.099976 616.559998 l
0.599976 w
S
1.0 w
n
391.799988 603.539978 m
391.799988 616.559998 l
0.600006 w
S
1.0 w
n
391.800018 603.839966 m
398.640015 603.839966 l
0.599976 w
S
1.0 w
n
340.859985 590.76001 m
340.859985 591.060059 l
0.600006 w
S
1.0 w
n
340.859985 591.059998 m
340.859985 597.719971 l
0.600006 w
S
1.0 w
n
367.080017 548.459961 m
367.080017 548.759949 l
0.600006 w
S
1.0 w
n
367.080017 526.97998 m
367.080017 548.459961 l
0.600006 w
S
1.0 w
n
367.079987 528.47998 m
366.600006 528.419983 l
366.23999 528.119995 l
366.0 527.76001 l
365.880005 527.279968 l
366.0 526.799988 l
366.23999 526.440002 l
366.600006 526.200012 l
367.079987 526.080017 l
367.559998 526.200012 l
367.919983 526.440002 l
368.220001 526.799988 l
368.279999 527.279968 l
368.220001 527.76001 l
367.919983 528.119995 l
367.559998 528.419983 l
367.079987 528.47998 l
eofill
n
367.139984 528.179993 m
366.660004 528.119995 l
366.779999 528.179993 l
366.419983 527.880005 l
366.47998 527.940002 l
366.23999 527.580017 l
366.300018 527.700012 l
366.179993 527.219971 l
366.179993 527.339966 l
366.300018 526.859985 l
366.23999 526.97998 l
366.47998 526.619995 l
366.419983 526.679993 l
366.779999 526.440002 l
366.660004 526.5 l
367.139984 526.380005 l
367.019989 526.380005 l
367.5 526.5 l
367.380005 526.440002 l
367.73999 526.679993 l
367.679993 526.619995 l
367.97998 526.97998 l
367.919983 526.799988 l
367.97998 527.279968 l
367.97998 527.219971 l
367.919983 527.700012 l
367.97998 527.580017 l
367.679993 527.940002 l
367.73999 527.880005 l
367.380005 528.179993 l
367.559998 528.119995 l
367.079987 528.179993 l
367.139984 528.779968 l
367.619995 528.719971 l
367.73999 528.659973 l
368.100006 528.359985 l
368.160004 528.299988 l
368.459991 527.940002 l
368.519989 527.76001 l
368.579987 527.279968 l
368.579987 527.219971 l
368.519989 526.73999 l
368.459991 526.619995 l
368.160004 526.26001 l
368.100006 526.200012 l
367.73999 525.959961 l
367.619995 525.900024 l
367.139984 525.779968 l
367.019989 525.779968 l
366.539978 525.900024 l
366.419983 525.959961 l
366.059998 526.200012 l
366.0 526.26001 l
365.759979 526.619995 l
365.700012 526.73999 l
365.579987 527.219971 l
365.579987 527.339966 l
365.700012 527.820007 l
365.759979 527.940002 l
366.0 528.299988 l
366.059998 528.359985 l
366.419983 528.659973 l
366.600006 528.719971 l
367.079987 528.779968 l
f
n
367.079987 528.179993 m
367.139984 528.179993 l
367.079987 528.779968 l
367.139984 528.779968 l
f
n
367.079987 552.839966 m
366.660004 552.779968 l
366.23999 552.659973 l
365.819977 552.47998 l
365.519989 552.179993 l
365.220001 551.820007 l
365.039978 551.459961 l
364.919983 551.039978 l
364.859985 550.619995 l
364.919983 550.140015 l
365.039978 549.719971 l
365.220001 549.359985 l
365.519989 549.0 l
365.819977 548.76001 l
366.23999 548.519958 l
366.660004 548.400024 l
367.079987 548.339966 l
367.559998 548.400024 l
367.97998 548.519958 l
368.339996 548.76001 l
368.639984 549.0 l
368.940002 549.359985 l
369.119995 549.719971 l
369.300018 550.140015 l
369.300018 551.039978 l
369.119995 551.459961 l
368.940002 551.820007 l
368.639984 552.179993 l
368.339996 552.47998 l
367.97998 552.659973 l
367.559998 552.779968 l
367.079987 552.839966 l
1.0  sg
eofill
n
367.139984 552.539978 m
366.720001 552.47998 l
366.779999 552.47998 l
366.359985 552.359985 l
365.940002 552.179993 l
366.059998 552.23999 l
365.759979 551.940002 l
365.759979 552.0 l
365.459991 551.640015 l
365.519989 551.700012 l
365.339996 551.339966 l
365.220001 550.919983 l
365.220001 550.97998 l
365.160004 550.559998 l
365.160004 550.619995 l
365.220001 550.140015 l
365.220001 550.200012 l
365.339996 549.779968 l
365.339996 549.839966 l
365.519989 549.47998 l
365.459991 549.539978 l
365.759979 549.179993 l
365.700012 549.23999 l
366.0 549.0 l
366.419983 548.76001 l
366.359985 548.820007 l
366.779999 548.700012 l
366.720001 548.700012 l
367.139984 548.640015 l
367.079987 548.640015 l
367.559998 548.700012 l
367.5 548.700012 l
367.919983 548.820007 l
367.800018 548.76001 l
368.160004 549.0 l
368.459991 549.23999 l
368.399994 549.179993 l
368.700012 549.539978 l
368.700012 549.47998 l
368.880005 549.839966 l
369.059998 550.26001 l
369.0 550.140015 l
369.0 551.039978 l
369.059998 550.919983 l
368.880005 551.339966 l
368.700012 551.700012 l
368.700012 551.640015 l
368.399994 552.0 l
368.459991 551.940002 l
368.160004 552.23999 l
368.220001 552.179993 l
367.859985 552.359985 l
367.919983 552.359985 l
367.5 552.47998 l
367.559998 552.47998 l
367.079987 552.539978 l
367.139984 553.140015 l
367.619995 553.080017 l
367.679993 553.080017 l
368.100006 552.959961 l
368.100006 552.900024 l
368.579987 552.659973 l
368.880005 552.359985 l
369.179993 552.0 l
369.23999 551.940002 l
369.419983 551.580017 l
369.600006 551.159973 l
369.600006 550.019958 l
369.419983 549.600037 l
369.23999 549.23999 l
369.179993 549.179993 l
368.880005 548.820007 l
368.819977 548.76001 l
368.519989 548.519958 l
368.160004 548.279968 l
368.100006 548.219971 l
367.679993 548.100037 l
367.619995 548.100037 l
367.139984 548.039978 l
367.079987 548.039978 l
366.660004 548.100037 l
366.600006 548.100037 l
366.179993 548.219971 l
366.119995 548.219971 l
365.700012 548.459961 l
365.639984 548.519958 l
365.339996 548.76001 l
365.279999 548.820007 l
364.97998 549.179993 l
364.97998 549.23999 l
364.800018 549.600037 l
364.73999 549.600037 l
364.619995 550.019958 l
364.619995 550.080017 l
364.559998 550.559998 l
364.559998 550.619995 l
364.619995 551.039978 l
364.619995 551.100037 l
364.73999 551.519958 l
364.800018 551.580017 l
364.97998 551.940002 l
364.97998 552.0 l
365.279999 552.359985 l
365.339996 552.359985 l
365.639984 552.659973 l
365.700012 552.719971 l
366.119995 552.900024 l
366.179993 552.959961 l
366.600006 553.080017 l
366.660004 553.080017 l
367.079987 553.140015 l
0.0  sg
f
n
367.079987 552.539978 m
367.139984 552.539978 l
367.079987 553.140015 l
367.139984 553.140015 l
f
n
440.339996 552.900024 31.920013 51.0 re
1.0  sg
f
n
440.339996 603.869995 m
473.039978 603.869995 l
1.5 w
0.0  sg
S
1.0 w
n
472.289978 552.119995 m
472.289978 603.900024 l
1.5 w
S
1.0 w
n
439.619995 552.869995 m
472.26001 552.869995 l
1.5 w
S
1.0 w
n
440.369995 552.900024 m
440.369995 604.619995 l
1.5 w
S
1.0 w
443.519989 588.23999 m
(T) show
462.23999 588.599976 m
(Q) show
461.940277 563.039978 m
(Q) show
n
462.75 570.839966 m
462.75 571.259949 l
0.179993 w
S
1.0 w
n
462.839996 571.049927 m
467.700012 571.049927 l
0.419983 w
S
1.0 w
n
440.459991 569.039978 m
440.220001 569.159973 l
439.97998 568.619995 l
440.220001 568.5 l
f
n
440.459991 569.039978 m
440.220001 568.5 l
446.579987 565.320007 l
446.819977 565.320007 l
447.419983 565.619995 l
446.819977 565.859985 l
f
n
440.459991 562.140015 m
440.220001 562.019958 l
439.97998 562.559998 l
440.220001 562.679993 l
f
n
446.819977 565.320007 m
446.579987 565.859985 l
440.220001 562.679993 l
440.459991 562.140015 l
f
n
481.469971 590.820007 m
481.469971 591.420044 l
0.300018 w
S
1.0 w
n
471.959991 591.119995 m
481.320007 591.119995 l
0.600037 w
S
1.0 w
n
429.929993 590.820007 m
429.929993 591.420044 l
0.300018 w
S
1.0 w
n
430.079987 591.119995 m
439.97998 591.119995 l
0.600037 w
S
1.0 w
n
429.959991 565.859985 m
439.97998 565.859985 l
0.599976 w
S
1.0 w
n
430.26001 539.880005 m
430.26001 565.859985 l
0.600006 w
S
1.0 w
n
421.109985 597.23999 m
421.109985 597.840027 l
0.300018 w
S
1.0 w
n
421.259979 597.540039 m
430.379974 597.540039 l
0.600037 w
S
1.0 w
n
420.359985 597.539978 m
420.359985 598.080017 l
420.359985 597.959961 l
420.300018 598.5 l
420.23999 598.97998 l
420.23999 598.919983 l
420.119995 599.459961 l
420.0 599.940002 l
419.880005 600.47998 l
419.940002 600.359985 l
419.759979 600.839966 l
419.579987 601.320007 l
419.399994 601.799988 l
419.399994 601.73999 l
419.160004 602.159973 l
418.919983 602.640015 l
418.97998 602.519958 l
418.679993 602.940002 l
418.380005 603.359985 l
418.440002 603.359985 l
418.139984 603.719971 l
417.779999 604.140015 l
417.47998 604.5 l
417.539978 604.380005 l
417.119995 604.73999 l
416.759979 605.039978 l
416.819977 605.039978 l
416.399994 605.339966 l
416.339996 605.339966 l
415.97998 605.640015 l
416.100006 605.579956 l
415.619995 605.880005 l
415.200012 606.119995 l
414.779999 606.359985 l
414.899994 606.299988 l
414.419983 606.47998 l
413.459991 606.839966 l
412.919983 607.019958 l
412.97998 607.019958 l
412.5 607.140015 l
412.619995 607.079956 l
412.079987 607.140015 l
411.539978 607.200012 l
411.0 607.26001 l
411.059998 607.26001 l
409.97998 607.26001 l
410.100006 607.26001 l
409.619995 607.200012 l
409.079987 607.140015 l
408.539978 607.079956 l
408.600006 607.140015 l
408.119995 607.019958 l
408.179993 607.019958 l
407.639984 606.839966 l
407.700012 606.839966 l
407.220001 606.659973 l
406.73999 606.47998 l
406.259979 606.299988 l
406.319977 606.359985 l
405.600006 607.679993 l
405.720001 607.679993 l
406.200012 607.859985 l
406.679993 608.039978 l
407.160004 608.219971 l
407.160004 608.279968 l
407.700012 608.459961 l
407.759979 608.459961 l
408.23999 608.579956 l
408.359985 608.579956 l
408.899994 608.640015 l
409.440002 608.700012 l
409.919983 608.76001 l
411.179993 608.76001 l
411.720001 608.700012 l
412.800018 608.579956 l
412.859985 608.579956 l
413.339996 608.459961 l
413.399994 608.459961 l
413.940002 608.279968 l
414.0 608.219971 l
414.47998 608.039978 l
414.959991 607.859985 l
415.440002 607.679993 l
415.5 607.679993 l
415.919983 607.440002 l
416.339996 607.200012 l
416.399994 607.140015 l
416.880005 606.839966 l
416.940002 606.779968 l
417.300018 606.47998 l
417.300018 606.539978 l
417.720001 606.23999 l
417.720001 606.179993 l
418.079987 605.880005 l
418.5 605.519958 l
418.619995 605.459961 l
418.919983 605.100037 l
419.279999 604.679993 l
419.579987 604.320007 l
419.579987 604.26001 l
419.880005 603.839966 l
420.179993 603.419983 l
420.23999 603.299988 l
420.47998 602.820007 l
420.47998 602.880005 l
420.720001 602.459961 l
420.779999 602.339966 l
420.959991 601.859985 l
421.139984 601.380005 l
421.319977 600.900024 l
421.319977 600.779968 l
421.440002 600.23999 l
421.440002 600.299988 l
421.559998 599.820007 l
421.559998 599.76001 l
421.679993 599.219971 l
421.73999 599.159973 l
421.800018 598.679993 l
421.859985 598.140015 l
421.859985 597.539978 l
f
n
406.319977 606.359985 m
405.899994 606.119995 l
405.419983 605.880005 l
405.539978 605.940002 l
405.119995 605.640015 l
404.700012 605.339966 l
404.339996 605.039978 l
403.919983 604.73999 l
403.97998 604.799988 l
403.619995 604.440002 l
403.679993 604.5 l
403.380005 604.140015 l
403.019989 603.719971 l
402.720001 603.359985 l
402.419983 602.940002 l
402.119995 602.519958 l
402.179993 602.640015 l
401.940002 602.159973 l
401.700012 601.73999 l
401.759979 601.799988 l
401.579987 601.320007 l
401.399994 600.839966 l
401.220001 600.359985 l
401.220001 600.419983 l
401.039978 599.880005 l
401.100006 600.0 l
401.039978 599.519958 l
400.97998 599.459961 l
400.859985 598.919983 l
400.919983 598.97998 l
400.859985 598.5 l
400.800018 597.959961 l
400.800018 598.080017 l
400.800018 597.0 l
400.800018 597.059998 l
400.859985 596.519958 l
400.919983 595.97998 l
400.859985 596.039978 l
400.97998 595.5 l
401.039978 595.440002 l
401.100006 594.959961 l
401.039978 595.140015 l
401.220001 594.600037 l
401.399994 594.119995 l
401.579987 593.640015 l
401.579987 593.700012 l
401.759979 593.279968 l
401.700012 593.279968 l
401.940002 592.799988 l
401.940002 592.859985 l
402.179993 592.440002 l
402.47998 591.959961 l
402.419983 592.080017 l
402.720001 591.719971 l
402.720001 591.659973 l
403.019989 591.23999 l
402.959991 591.359985 l
403.319977 591.0 l
403.380005 590.940002 l
403.679993 590.580017 l
403.619995 590.640015 l
403.97998 590.279968 l
403.919983 590.279968 l
404.339996 589.919983 l
403.380005 588.779968 l
402.959991 589.140015 l
402.899994 589.200012 l
402.539978 589.559998 l
402.539978 589.619995 l
402.23999 589.97998 l
402.23999 589.919983 l
401.880005 590.279968 l
401.819977 590.339966 l
401.519989 590.76001 l
401.579987 590.76001 l
401.279999 591.119995 l
401.220001 591.179993 l
400.919983 591.659973 l
400.859985 591.719971 l
400.619995 592.140015 l
400.380005 592.619995 l
400.380005 592.679993 l
400.200012 593.100037 l
400.019989 593.580017 l
399.839996 594.059998 l
399.779999 594.119995 l
399.600006 594.659973 l
399.600006 594.779968 l
399.539978 595.26001 l
399.539978 595.200012 l
399.419983 595.73999 l
399.419983 595.799988 l
399.300018 596.880005 l
399.300018 598.140015 l
399.359985 598.679993 l
399.419983 599.159973 l
399.419983 599.219971 l
399.539978 599.76001 l
399.539978 599.700012 l
399.600006 600.179993 l
399.600006 600.359985 l
399.779999 600.900024 l
399.839996 600.900024 l
400.019989 601.380005 l
400.200012 601.859985 l
400.380005 602.339966 l
400.380005 602.459961 l
400.619995 602.880005 l
400.619995 602.820007 l
400.919983 603.419983 l
401.519989 604.26001 l
401.579987 604.320007 l
401.880005 604.679993 l
402.23999 605.100037 l
402.539978 605.459961 l
402.539978 605.519958 l
402.899994 605.880005 l
403.019989 605.940002 l
403.440002 606.23999 l
403.380005 606.179993 l
403.73999 606.47998 l
403.800018 606.539978 l
404.220001 606.839966 l
404.639984 607.140015 l
404.759979 607.200012 l
405.23999 607.440002 l
405.179993 607.440002 l
405.600006 607.679993 l
f
n
404.339996 589.919983 m
404.700012 589.619995 l
404.700012 589.679993 l
405.119995 589.380005 l
405.0 589.440002 l
405.419983 589.200012 l
405.47998 589.140015 l
405.959991 588.839966 l
405.899994 588.900024 l
406.319977 588.659973 l
406.259979 588.659973 l
406.73999 588.47998 l
407.220001 588.299988 l
407.700012 588.119995 l
407.579987 588.179993 l
408.119995 588.059998 l
408.600006 587.940002 l
409.139984 587.820007 l
409.079987 587.820007 l
409.619995 587.76001 l
410.100006 587.700012 l
409.97998 587.700012 l
411.059998 587.700012 l
411.0 587.700012 l
411.539978 587.76001 l
412.079987 587.820007 l
412.019989 587.820007 l
412.559998 587.940002 l
412.5 587.940002 l
412.97998 588.059998 l
413.039978 588.059998 l
413.579987 588.179993 l
413.459991 588.119995 l
413.940002 588.299988 l
414.419983 588.47998 l
414.899994 588.659973 l
414.779999 588.659973 l
415.200012 588.900024 l
415.139984 588.839966 l
415.559998 589.140015 l
415.679993 589.200012 l
416.160004 589.440002 l
415.97998 589.320007 l
416.339996 589.619995 l
416.399994 589.679993 l
416.819977 589.97998 l
416.700012 589.919983 l
417.059998 590.279968 l
417.119995 590.279968 l
417.539978 590.640015 l
417.47998 590.580017 l
417.779999 590.940002 l
417.779999 591.0 l
418.139984 591.359985 l
418.079987 591.23999 l
418.380005 591.659973 l
418.440002 591.719971 l
418.73999 592.080017 l
418.679993 591.959961 l
418.97998 592.440002 l
418.919983 592.440002 l
419.160004 592.859985 l
419.160004 592.799988 l
419.399994 593.279968 l
419.579987 593.700012 l
419.579987 593.640015 l
419.759979 594.119995 l
419.940002 594.600037 l
419.880005 594.47998 l
420.0 595.019958 l
420.0 595.080017 l
421.440002 594.719971 l
421.319977 594.179993 l
421.319977 594.059998 l
421.139984 593.580017 l
420.959991 593.100037 l
420.779999 592.679993 l
420.720001 592.619995 l
420.47998 592.140015 l
420.23999 591.719971 l
420.23999 591.659973 l
419.940002 591.179993 l
419.880005 591.119995 l
419.579987 590.76001 l
419.279999 590.339966 l
418.859985 589.919983 l
418.919983 589.97998 l
418.619995 589.619995 l
418.5 589.5 l
418.079987 589.140015 l
418.139984 589.200012 l
417.779999 588.839966 l
417.720001 588.779968 l
417.300018 588.47998 l
416.940002 588.179993 l
416.819977 588.119995 l
416.339996 587.880005 l
416.459991 587.940002 l
416.039978 587.640015 l
415.919983 587.580017 l
415.5 587.339966 l
415.440002 587.279968 l
414.959991 587.100037 l
414.47998 586.919983 l
414.0 586.73999 l
413.880005 586.73999 l
413.339996 586.619995 l
412.859985 586.5 l
412.319977 586.380005 l
412.259979 586.320007 l
411.720001 586.26001 l
411.179993 586.200012 l
409.919983 586.200012 l
409.440002 586.26001 l
408.899994 586.320007 l
408.839996 586.380005 l
408.300018 586.5 l
408.23999 586.5 l
407.759979 586.619995 l
407.819977 586.619995 l
407.279999 586.73999 l
407.160004 586.73999 l
406.679993 586.919983 l
405.720001 587.279968 l
405.600006 587.339966 l
405.179993 587.580017 l
404.700012 587.880005 l
404.279999 588.119995 l
404.220001 588.179993 l
403.800018 588.47998 l
403.73999 588.47998 l
403.380005 588.779968 l
f
n
420.0 595.080017 m
420.119995 595.559998 l
420.119995 595.5 l
420.23999 596.039978 l
420.23999 595.97998 l
420.300018 596.519958 l
420.359985 597.059998 l
420.359985 597.0 l
420.359985 597.539978 l
421.859985 597.539978 l
421.859985 596.880005 l
421.73999 595.799988 l
421.679993 595.73999 l
421.559998 595.200012 l
421.440002 594.719971 l
f
n
398.880005 586.97998 12.480011 21.059998 re
1.0  sg
f
n
398.160004 608.01001 m
411.359985 608.01001 l
1.5 w
0.0  sg
S
1.0 w
n
398.910004 586.200012 m
398.910004 608.040039 l
1.5 w
S
1.0 w
n
398.880005 586.950012 m
411.359985 586.950012 l
1.5 w
S
1.0 w
n
430.080017 590.820007 m
430.080017 591.119995 l
0.600006 w
S
1.0 w
n
430.080017 591.119995 m
430.080017 597.839966 l
0.600006 w
S
1.0 w
n
456.299988 548.519958 m
456.299988 548.819946 l
0.600006 w
S
1.0 w
n
456.299988 527.100037 m
456.299988 548.52002 l
0.600006 w
S
1.0 w
n
456.300018 552.900024 m
455.819977 552.839966 l
455.399994 552.719971 l
455.039978 552.539978 l
454.679993 552.23999 l
454.440002 551.940002 l
454.200012 551.519958 l
454.079987 551.100037 l
454.079987 550.200012 l
454.200012 549.779968 l
454.440002 549.419983 l
454.679993 549.119995 l
455.039978 548.820007 l
455.399994 548.640015 l
455.819977 548.459961 l
456.720001 548.459961 l
457.559998 548.820007 l
457.859985 549.119995 l
458.160004 549.419983 l
458.339996 549.779968 l
458.459991 550.200012 l
458.519989 550.679993 l
458.459991 551.100037 l
458.339996 551.519958 l
458.160004 551.940002 l
457.859985 552.23999 l
457.559998 552.539978 l
457.139984 552.719971 l
456.720001 552.839966 l
456.300018 552.900024 l
1.0  sg
eofill
n
456.359985 552.600037 m
455.880005 552.539978 l
455.940002 552.539978 l
455.519989 552.419983 l
455.160004 552.23999 l
455.220001 552.299988 l
454.859985 552.0 l
454.919983 552.059998 l
454.679993 551.76001 l
454.73999 551.76001 l
454.5 551.339966 l
454.5 551.400024 l
454.380005 550.97998 l
454.380005 551.100037 l
454.380005 550.200012 l
454.380005 550.26001 l
454.5 549.839966 l
454.440002 549.959961 l
454.679993 549.600037 l
454.919983 549.299988 l
454.859985 549.359985 l
455.220001 549.059998 l
455.160004 549.059998 l
455.519989 548.880005 l
455.940002 548.700012 l
455.819977 548.76001 l
456.720001 548.76001 l
456.600006 548.700012 l
457.019989 548.880005 l
457.440002 549.059998 l
457.380005 549.0 l
457.679993 549.299988 l
457.97998 549.600037 l
457.919983 549.539978 l
458.100006 549.900024 l
458.039978 549.839966 l
458.160004 550.26001 l
458.160004 550.200012 l
458.220001 550.679993 l
458.220001 550.619995 l
458.160004 551.039978 l
458.160004 550.97998 l
458.039978 551.400024 l
458.100006 551.400024 l
457.919983 551.820007 l
457.97998 551.700012 l
457.679993 552.0 l
457.380005 552.299988 l
457.440002 552.23999 l
457.019989 552.419983 l
457.079987 552.419983 l
456.660004 552.539978 l
456.720001 552.539978 l
456.300018 552.600037 l
456.359985 553.200012 l
456.779999 553.140015 l
456.839996 553.140015 l
457.259979 553.019958 l
457.259979 552.959961 l
457.679993 552.779968 l
457.800018 552.719971 l
458.100006 552.419983 l
458.399994 552.119995 l
458.459991 552.059998 l
458.639984 551.640015 l
458.639984 551.580017 l
458.759979 551.159973 l
458.759979 551.100037 l
458.819977 550.679993 l
458.819977 550.619995 l
458.759979 550.140015 l
458.759979 550.080017 l
458.639984 549.659973 l
458.459991 549.299988 l
458.399994 549.179993 l
458.100006 548.880005 l
457.800018 548.580017 l
457.679993 548.519958 l
456.839996 548.159973 l
455.700012 548.159973 l
455.279999 548.339966 l
454.919983 548.519958 l
454.859985 548.580017 l
454.5 548.880005 l
454.440002 548.940002 l
454.200012 549.23999 l
453.959991 549.600037 l
453.899994 549.659973 l
453.779999 550.080017 l
453.779999 551.159973 l
453.899994 551.580017 l
453.959991 551.640015 l
454.200012 552.059998 l
454.200012 552.119995 l
454.440002 552.419983 l
454.5 552.47998 l
454.859985 552.779968 l
454.919983 552.779968 l
455.279999 552.959961 l
455.339996 553.019958 l
455.759979 553.140015 l
455.819977 553.140015 l
456.300018 553.200012 l
0.0  sg
f
n
456.300018 552.600037 m
456.359985 552.600037 l
456.300018 553.200012 l
456.359985 553.200012 l
f
n
162.119995 540.180054 m
430.559998 540.180054 l
0.600037 w
S
1.0 w
n
162.419998 540.179993 m
162.419998 565.97998 l
0.600006 w
S
1.0 w
n
251.639999 590.880005 m
251.639999 591.180054 l
0.600006 w
S
1.0 w
n
251.639999 591.179993 m
251.639999 597.900024 l
0.600006 w
S
1.0 w
n
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%DocumentNeededResources:
%%+ font TimesNewRomanPSMT
%%EOF
