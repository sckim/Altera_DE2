%!PS-Adobe-3.0 EPSF-3.0
%%Title: (figure2.2.fm)
%%Version: 1 4
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 09:52:26 05/04/06
%%For: (sbrown)
%%DocumentData: Clean7Bit
%%BoundingBox: 87 469 482 727
%%HiResBoundingBox: 87.0 469.0 482.0 727.0
%%Pages: 0
%%DocumentProcessColors:
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L1 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr SEPS ttf hb Printer/PostScript Color Management 0
%%BeginResource: file Pscript_T42Hdr PSVER
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.18 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.18 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset l2compat 6.0 1
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
cvi
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset sep_ops 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/undefineRes {
null exch
defineRes
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource TimesNewRomanPSMT
[/N22/TimesNewRomanPSMT 1 TZ
%%IncludeResource TimesNewRomanPS-ItalicMT
[/N26/TimesNewRomanPS-ItalicMT 1 TZ
%%IncludeResource ArialMT
[/N27/ArialMT 1 TZ

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 1221 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:b8e0af39-7a80-41dc-8d5b-b0a012210639' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Acrobat Distiller 6.0 (Windows)'></rdf:Description>
<rdf:Description rdf:about='uuid:b8e0af39-7a80-41dc-8d5b-b0a012210639' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:CreatorTool='FrameMaker 7.0' xap:ModifyDate='2006-05-04T09:51:48-04:00' xap:CreateDate='1997-04-11T18:09:45Z' xap:MetadataDate='2006-05-04T09:51:48-04:00'></rdf:Description>
<rdf:Description rdf:about='uuid:b8e0af39-7a80-41dc-8d5b-b0a012210639' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:acffb3aa-5df1-4a46-b1b8-afbcd64f299f'/>
<rdf:Description rdf:about='uuid:b8e0af39-7a80-41dc-8d5b-b0a012210639' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>figure2.2.fm</rdf:li></rdf:Alt></dc:title><dc:creator><rdf:Seq><rdf:li>sbrown</rdf:li></rdf:Seq></dc:creator></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
87 469 395 258 rectclip
87.0 469.0 395.0 258.0 re
W
n
n
352.709991 664.019958 m
352.709991 708.419983 l
1.5 w
S
1.0 w
n
352.679993 707.669983 m
399.059998 707.669983 l
1.5 w
S
1.0 w
n
398.309998 663.23999 m
398.309998 707.700012 l
1.5 w
S
1.0 w
n
351.959991 663.98999 m
398.279999 663.98999 l
1.5 w
S
1.0 w
369.720001 683.640015 m
/N22 9.0 Tf
(FA)
[4.978798 6.472801 ] pdfxs
n
158.48999 702.600037 m
158.48999 703.200073 l
0.300003 w
S
1.0 w
n
158.639999 702.900024 m
180.600006 702.900024 l
0.600037 w
S
1.0 w
n
210.149994 656.640015 m
210.149994 657.240051 l
0.300003 w
S
1.0 w
n
210.300003 656.940063 m
222.180008 656.940063 l
0.600037 w
S
1.0 w
n
222.029999 673.380005 m
222.029999 673.97998 l
0.300018 w
S
1.0 w
n
158.339996 673.679993 m
221.87999 673.679993 l
0.599976 w
S
1.0 w
n
231.119995 679.73999 m
231.119995 680.040039 l
0.600006 w
S
1.0 w
n
231.119995 680.039978 m
231.119995 699.179993 l
0.600006 w
S
1.0 w
n
221.279999 646.26001 m
221.279999 685.320007 l
222.179993 684.839966 l
237.419998 677.219971 l
237.720001 677.039978 l
237.720001 653.519958 l
237.419998 653.339966 l
236.519989 653.880005 l
236.519989 676.679993 l
237.720001 676.679993 l
236.87999 676.140015 l
221.639999 683.76001 l
222.179993 684.839966 l
222.479996 684.299988 l
222.479996 646.26001 l
f
n
237.419998 653.339966 m
222.179993 645.719971 l
221.279999 645.23999 l
221.279999 646.26001 l
221.639999 646.799988 l
236.87999 654.419983 l
f
n
261.300018 703.200012 m
279.300018 703.200012 l
0.599976 w
S
1.0 w
n
181.319977 705.059998 m
181.319977 706.26001 l
0.599991 w
S
1.0 w
n
181.619995 706.26001 m
189.23999 706.200012 l
189.300003 706.200012 l
190.800003 706.019958 l
190.73999 706.019958 l
190.919998 705.959961 l
192.059998 705.600037 l
192.419998 705.47998 l
192.179993 705.600037 l
193.619995 704.880005 l
193.5 704.940002 l
193.679993 704.820007 l
194.819992 704.100037 l
195.360001 703.73999 l
195.300003 703.799988 l
195.419998 703.679993 l
196.259995 702.959961 l
196.319992 702.900024 l
197.339996 701.700012 l
196.440002 700.919983 l
195.419998 702.119995 l
196.319992 702.900024 l
195.479996 702.059998 l
194.639999 702.779968 l
195.419998 703.679993 l
194.699997 702.719971 l
194.159988 703.079956 l
194.819992 704.100037 l
194.159988 703.079956 l
193.019989 703.799988 l
193.679993 704.820007 l
193.080002 703.799988 l
191.639999 704.519958 l
192.179993 705.600037 l
191.699997 704.459961 l
190.559998 704.820007 l
190.919998 705.959961 l
190.679993 704.820007 l
189.179993 705.0 l
189.300003 706.200012 l
189.23999 705.0 l
181.619995 705.059998 l
f
n
197.339996 701.700012 m
198.059998 700.73999 l
198.179993 700.559998 l
198.119995 700.679993 l
197.100006 700.019958 l
196.37999 700.97998 l
f
n
199.080002 699.179993 m
199.37999 698.700012 l
198.360001 698.039978 l
198.059998 698.519958 l
f
n
198.119995 700.679993 m
197.100006 700.019958 l
198.059998 698.519958 l
199.080002 699.179993 l
f
n
181.319977 691.5 m
181.319977 692.700012 l
0.599991 w
S
1.0 w
n
181.619995 692.700012 m
189.23999 692.76001 l
189.300003 691.559998 l
189.179993 692.76001 l
190.679993 692.940002 l
190.919998 691.73999 l
190.559998 692.880005 l
191.699997 693.23999 l
192.179993 692.159973 l
191.639999 693.23999 l
193.080002 693.959961 l
193.679993 692.880005 l
193.019989 693.900024 l
194.159988 694.619995 l
194.819992 693.659973 l
194.100006 694.619995 l
194.639999 695.039978 l
195.419998 694.079956 l
194.639999 694.97998 l
195.479996 695.700012 l
196.319992 694.859985 l
195.419998 695.640015 l
196.440002 696.779968 l
197.339996 696.059998 l
197.100006 695.76001 l
197.339996 696.0 l
196.319992 694.859985 l
196.259995 694.799988 l
195.419998 694.079956 l
195.959991 694.559998 l
195.360001 694.079956 l
194.819992 693.659973 l
194.459991 693.359985 l
194.819992 693.600037 l
193.679993 692.880005 l
193.860001 693.0 l
193.619995 692.880005 l
192.179993 692.159973 l
192.059998 692.100037 l
190.919998 691.73999 l
190.800003 691.73999 l
189.300003 691.559998 l
189.23999 691.559998 l
181.619995 691.5 l
f
n
196.37999 696.779968 m
197.100006 697.799988 l
198.119995 697.079956 l
199.139999 698.579956 l
198.059998 697.079956 l
197.339996 696.059998 l
f
n
198.059998 699.179993 m
198.360001 699.659973 l
199.37999 699.0 l
199.080002 698.519958 l
f
n
197.100006 697.73999 m
198.119995 697.079956 l
199.080002 698.519958 l
198.059998 699.179993 l
f
n
182.039993 705.659973 m
181.860001 706.079956 l
181.440002 706.26001 l
181.019989 706.079956 l
180.839996 705.659973 l
181.019989 705.23999 l
181.440002 705.059998 l
181.860001 705.23999 l
182.039993 705.659973 l
f
n
181.979996 705.900024 m
182.759995 704.039978 l
183.23999 702.839966 l
182.819992 703.97998 l
183.23999 702.900024 l
183.179993 703.019958 l
183.23999 702.839966 l
183.720001 701.100037 l
183.720001 701.159973 l
183.720001 701.039978 l
182.580002 700.799988 l
182.100006 702.539978 l
183.23999 702.839966 l
182.100006 702.47998 l
181.679993 703.559998 l
182.819992 703.97998 l
181.679993 703.559998 l
180.900009 705.419983 l
f
n
183.720001 701.039978 m
183.959991 699.539978 l
182.759995 699.359985 l
182.519989 700.859985 l
f
n
184.019989 698.880005 m
183.839996 699.299988 l
183.419998 699.47998 l
183.0 699.299988 l
182.819992 698.880005 l
183.0 698.459961 l
183.419998 698.279968 l
183.839996 698.459961 l
184.019989 698.880005 l
f
n
183.959991 699.539978 m
182.759995 699.419983 l
182.819992 698.820007 l
184.019989 698.940002 l
f
n
182.039993 692.100037 m
181.860001 692.519958 l
181.440002 692.700012 l
181.019989 692.519958 l
180.839996 692.100037 l
181.019989 691.679993 l
181.440002 691.5 l
181.860001 691.679993 l
182.039993 692.100037 l
f
n
180.900009 692.339966 m
181.679993 694.200012 l
182.819992 693.719971 l
181.679993 694.140015 l
182.100006 695.279968 l
183.23999 694.919983 l
182.100006 695.219971 l
182.580002 696.900024 l
183.720001 696.659973 l
183.720001 696.539978 l
183.720001 696.600037 l
183.23999 694.919983 l
183.179993 694.679993 l
183.23999 694.859985 l
182.819992 693.719971 l
183.23999 694.919983 l
182.759995 693.719971 l
181.979996 691.859985 l
f
n
182.519989 696.839966 m
182.759995 698.339966 l
183.959991 698.219971 l
183.959991 698.039978 l
183.959991 698.159973 l
183.720001 696.659973 l
f
n
184.019989 698.880005 m
183.839996 699.299988 l
183.419998 699.47998 l
183.0 699.299988 l
182.819992 698.880005 l
183.0 698.459961 l
183.419998 698.279968 l
183.839996 698.459961 l
184.019989 698.880005 l
f
n
182.759995 698.339966 m
183.959991 698.219971 l
184.019989 698.820007 l
182.819992 698.940002 l
f
n
179.339996 705.659973 m
179.159988 706.079956 l
178.73999 706.26001 l
178.319992 706.079956 l
178.139999 705.659973 l
178.319992 705.23999 l
178.73999 705.059998 l
179.159988 705.23999 l
179.339996 705.659973 l
f
n
179.279999 705.900024 m
180.059998 704.039978 l
180.539993 702.839966 l
180.119995 703.97998 l
180.539993 702.900024 l
180.479996 703.019958 l
180.539993 702.839966 l
181.019989 701.100037 l
181.019989 701.159973 l
181.019989 701.039978 l
179.87999 700.799988 l
179.400009 702.539978 l
180.539993 702.839966 l
179.400009 702.47998 l
178.979996 703.559998 l
180.119995 703.97998 l
178.979996 703.559998 l
178.199997 705.419983 l
f
n
181.019989 701.039978 m
181.259995 699.539978 l
180.059998 699.359985 l
179.819992 700.859985 l
f
n
181.37999 698.880005 m
181.199997 699.299988 l
180.779999 699.47998 l
180.360001 699.299988 l
180.179993 698.880005 l
180.360001 698.459961 l
180.779999 698.279968 l
181.199997 698.459961 l
181.37999 698.880005 l
f
n
181.259995 699.600037 m
180.059998 699.359985 l
180.179993 698.76001 l
181.37999 699.0 l
f
n
179.339996 692.100037 m
179.159988 692.519958 l
178.73999 692.700012 l
178.319992 692.519958 l
178.139999 692.100037 l
178.319992 691.679993 l
178.73999 691.5 l
179.159988 691.679993 l
179.339996 692.100037 l
f
n
178.199997 692.339966 m
178.979996 694.200012 l
180.119995 693.719971 l
178.979996 694.140015 l
179.400009 695.279968 l
180.539993 694.919983 l
179.400009 695.219971 l
179.87999 696.900024 l
181.019989 696.659973 l
181.019989 696.539978 l
181.019989 696.600037 l
180.539993 694.919983 l
180.479996 694.679993 l
180.539993 694.859985 l
180.119995 693.719971 l
180.539993 694.919983 l
180.059998 693.719971 l
179.279999 691.859985 l
f
n
179.819992 696.839966 m
180.059998 698.339966 l
180.119995 698.640015 l
180.059998 698.400024 l
181.259995 698.159973 l
181.019989 696.659973 l
f
n
181.37999 698.880005 m
181.199997 699.299988 l
180.779999 699.47998 l
180.360001 699.299988 l
180.179993 698.880005 l
180.360001 698.459961 l
180.779999 698.279968 l
181.199997 698.459961 l
181.37999 698.880005 l
f
n
180.059998 698.400024 m
181.259995 698.159973 l
181.37999 698.76001 l
180.179993 699.0 l
f
n
168.929993 693.47998 m
168.929993 694.080017 l
0.300003 w
S
1.0 w
n
169.080002 693.780029 m
179.880005 693.780029 l
0.600037 w
S
1.0 w
n
198.929993 698.579956 m
198.929993 699.179993 l
0.300003 w
S
1.0 w
n
199.080002 698.880005 m
243.12001 698.880005 l
0.600037 w
S
1.0 w
n
210.149994 707.400024 m
210.149994 708.0 l
0.300003 w
S
1.0 w
n
210.300003 707.700012 m
243.0 707.700012 l
0.599976 w
S
1.0 w
n
244.319977 709.380005 m
244.319977 710.580017 l
0.599991 w
S
1.0 w
n
244.619995 710.579956 m
252.23999 710.519958 l
252.300003 710.519958 l
253.800003 710.339966 l
253.73999 710.339966 l
253.919998 710.279968 l
255.059998 709.919983 l
255.419998 709.799988 l
255.179993 709.919983 l
256.619995 709.200012 l
256.019989 709.5 l
257.820007 708.419983 l
258.119995 708.23999 l
257.880005 708.419983 l
258.359985 708.059998 l
258.300018 708.119995 l
258.419983 708.0 l
259.259979 707.279968 l
259.320007 707.219971 l
260.339996 706.019958 l
259.440002 705.23999 l
258.419983 706.440002 l
259.320007 707.219971 l
258.47998 706.380005 l
257.639984 707.100037 l
258.419983 708.0 l
257.639984 707.100037 l
257.160004 707.459961 l
257.880005 708.419983 l
257.220001 707.400024 l
256.019989 708.119995 l
256.619995 709.140015 l
256.079987 708.119995 l
254.639999 708.839966 l
255.179993 709.919983 l
254.699997 708.779968 l
253.559998 709.140015 l
253.919998 710.279968 l
253.679993 709.140015 l
252.179993 709.320007 l
252.300003 710.519958 l
252.23999 709.320007 l
244.619995 709.380005 l
f
n
260.339996 706.019958 m
261.059998 705.059998 l
261.300018 704.76001 l
261.119995 705.0 l
260.100006 704.339966 l
259.380005 705.299988 l
f
n
262.139984 703.5 m
262.440002 703.019958 l
261.419983 702.359985 l
261.119995 702.839966 l
f
n
261.119995 705.0 m
260.100006 704.339966 l
261.119995 702.839966 l
262.139984 703.5 l
f
n
244.319977 695.820007 m
244.319977 697.02002 l
0.599991 w
S
1.0 w
n
244.619995 697.019958 m
252.23999 697.079956 l
252.300003 695.880005 l
252.179993 697.079956 l
253.679993 697.26001 l
253.919998 696.059998 l
253.559998 697.200012 l
254.699997 697.559998 l
255.179993 696.47998 l
254.639999 697.559998 l
256.079987 698.279968 l
256.619995 697.200012 l
256.019989 698.219971 l
257.220001 698.940002 l
257.940002 697.97998 l
257.160004 698.880005 l
257.639984 699.299988 l
258.300018 699.900024 l
257.639984 699.359985 l
258.47998 700.019958 l
259.320007 699.119995 l
258.419983 699.900024 l
259.440002 701.100037 l
260.339996 700.380005 l
260.100006 700.019958 l
260.339996 700.320007 l
259.320007 699.119995 l
259.440002 699.23999 l
259.200012 699.059998 l
258.359985 698.400024 l
257.639984 699.359985 l
258.419983 698.400024 l
257.940002 697.97998 l
258.0 698.039978 l
257.820007 697.919983 l
256.619995 697.200012 l
255.179993 696.47998 l
255.059998 696.419983 l
253.919998 696.059998 l
253.800003 696.059998 l
252.300003 695.880005 l
252.23999 695.880005 l
244.619995 695.820007 l
f
n
259.380005 701.100037 m
260.100006 702.119995 l
261.059998 701.400024 l
260.339996 700.380005 l
f
n
261.119995 703.559998 m
261.47998 704.039978 l
262.440002 703.320007 l
262.079987 702.839966 l
f
n
260.100006 702.119995 m
261.059998 701.400024 l
262.079987 702.839966 l
261.119995 703.559998 l
f
n
245.039993 709.97998 m
244.860001 710.400024 l
244.439987 710.579956 l
244.019989 710.400024 l
243.839996 709.97998 l
244.019989 709.559998 l
244.439987 709.380005 l
244.860001 709.559998 l
245.039993 709.97998 l
f
n
244.979996 710.219971 m
245.759995 708.359985 l
246.23999 707.159973 l
245.819992 708.299988 l
246.23999 707.219971 l
246.179993 707.339966 l
246.23999 707.159973 l
246.720001 705.419983 l
246.720001 705.47998 l
246.720001 705.359985 l
245.580002 705.119995 l
245.100006 706.859985 l
246.23999 707.159973 l
245.100006 706.799988 l
244.679993 707.880005 l
245.819992 708.299988 l
244.679993 707.880005 l
243.900009 709.73999 l
f
n
246.720001 705.359985 m
246.959991 703.859985 l
245.759995 703.679993 l
245.519989 705.179993 l
f
n
247.080002 703.200012 m
246.900009 703.619995 l
246.479996 703.799988 l
246.059998 703.619995 l
245.87999 703.200012 l
246.059998 702.779968 l
246.479996 702.600037 l
246.900009 702.779968 l
247.080002 703.200012 l
f
n
246.959991 703.919983 m
245.759995 703.679993 l
245.87999 703.079956 l
247.080002 703.320007 l
f
n
245.039993 696.419983 m
244.860001 696.839966 l
244.439987 697.019958 l
244.019989 696.839966 l
243.839996 696.419983 l
244.019989 696.0 l
244.439987 695.820007 l
244.860001 696.0 l
245.039993 696.419983 l
f
n
243.900009 696.659973 m
244.679993 698.519958 l
245.819992 698.039978 l
244.679993 698.459961 l
245.100006 699.600037 l
246.23999 699.23999 l
245.100006 699.539978 l
245.580002 701.219971 l
246.720001 700.97998 l
246.720001 700.859985 l
246.720001 700.919983 l
246.23999 699.23999 l
246.179993 699.0 l
246.23999 699.179993 l
245.819992 698.039978 l
246.23999 699.23999 l
245.759995 698.039978 l
244.979996 696.179993 l
f
n
245.519989 701.159973 m
245.759995 702.659973 l
245.819992 702.959961 l
245.759995 702.719971 l
246.959991 702.47998 l
246.720001 700.97998 l
f
n
247.080002 703.200012 m
246.900009 703.619995 l
246.479996 703.799988 l
246.059998 703.619995 l
245.87999 703.200012 l
246.059998 702.779968 l
246.479996 702.600037 l
246.900009 702.779968 l
247.080002 703.200012 l
f
n
245.759995 702.719971 m
246.959991 702.47998 l
247.080002 703.079956 l
245.87999 703.320007 l
f
n
242.339996 709.97998 m
242.159988 710.400024 l
241.73999 710.579956 l
241.319992 710.400024 l
241.139999 709.97998 l
241.319992 709.559998 l
241.73999 709.380005 l
242.159988 709.559998 l
242.339996 709.97998 l
f
n
242.279999 710.219971 m
243.119995 708.359985 l
243.300003 708.0 l
243.179993 708.299988 l
243.539993 707.219971 l
243.419998 707.519958 l
243.539993 707.159973 l
244.019989 705.419983 l
244.019989 705.47998 l
244.019989 705.359985 l
242.87999 705.119995 l
242.400009 706.859985 l
243.539993 707.159973 l
242.400009 706.859985 l
242.039993 707.940002 l
243.179993 708.299988 l
242.039993 707.880005 l
241.199997 709.73999 l
f
n
244.019989 705.359985 m
244.259995 703.859985 l
243.059998 703.679993 l
242.819992 705.179993 l
f
n
244.37999 703.200012 m
244.199997 703.619995 l
243.779999 703.799988 l
243.360001 703.619995 l
243.179993 703.200012 l
243.360001 702.779968 l
243.779999 702.600037 l
244.199997 702.779968 l
244.37999 703.200012 l
f
n
244.259995 703.919983 m
243.059998 703.679993 l
243.179993 703.079956 l
244.37999 703.320007 l
f
n
242.339996 696.419983 m
242.159988 696.839966 l
241.73999 697.019958 l
241.319992 696.839966 l
241.139999 696.419983 l
241.319992 696.0 l
241.73999 695.820007 l
242.159988 696.0 l
242.339996 696.419983 l
f
n
241.199997 696.659973 m
242.039993 698.519958 l
243.179993 698.100037 l
242.039993 698.459961 l
242.400009 699.600037 l
243.539993 699.23999 l
242.400009 699.539978 l
242.87999 701.219971 l
244.019989 700.97998 l
244.019989 700.859985 l
244.019989 700.919983 l
243.539993 699.23999 l
243.179993 698.100037 l
243.23999 698.339966 l
243.119995 698.039978 l
242.279999 696.179993 l
f
n
242.819992 701.159973 m
243.059998 702.659973 l
243.119995 702.959961 l
243.059998 702.719971 l
244.259995 702.47998 l
244.019989 700.97998 l
f
n
244.37999 703.200012 m
244.199997 703.619995 l
243.779999 703.799988 l
243.360001 703.619995 l
243.179993 703.200012 l
243.360001 702.779968 l
243.779999 702.600037 l
244.199997 702.779968 l
244.37999 703.200012 l
f
n
243.059998 702.719971 m
244.259995 702.47998 l
244.37999 703.079956 l
243.179993 703.320007 l
f
224.100006 671.700012 m
/N22 [6.735001 0.0 0.0 6.600006 0.0 0.0] Tf
(0) show
224.100006 654.600098 m
(1) show
n
231.900009 698.640015 m
231.900009 698.820007 l
231.839996 698.940002 l
231.779999 699.119995 l
231.720001 699.23999 l
231.600006 699.299988 l
231.419998 699.359985 l
231.300003 699.419983 l
231.0 699.419983 l
230.819992 699.359985 l
230.699997 699.299988 l
230.580002 699.23999 l
230.519989 699.119995 l
230.459991 698.940002 l
230.400009 698.820007 l
230.400009 698.519958 l
230.459991 698.339966 l
230.519989 698.219971 l
230.580002 698.100037 l
230.699997 698.039978 l
230.819992 697.97998 l
231.0 697.919983 l
231.300003 697.919983 l
231.419998 697.97998 l
231.600006 698.039978 l
231.720001 698.100037 l
231.779999 698.219971 l
231.839996 698.339966 l
231.900009 698.519958 l
231.900009 698.640015 l
eofill
n
231.300003 698.640015 m
231.300003 698.820007 l
231.360001 698.519958 l
231.300003 698.640015 l
231.300003 698.76001 l
231.23999 698.940002 l
231.23999 698.820007 l
231.179993 698.940002 l
231.479996 698.700012 l
231.360001 698.76001 l
231.419998 698.700012 l
231.23999 698.76001 l
231.179993 698.820007 l
231.059998 698.880005 l
231.300003 698.820007 l
231.0 698.820007 l
231.179993 698.820007 l
231.0 698.76001 l
231.119995 698.820007 l
231.0 698.76001 l
230.87999 698.700012 l
231.119995 698.940002 l
231.059998 698.820007 l
231.119995 698.940002 l
231.059998 698.76001 l
231.0 698.640015 l
230.940002 698.519958 l
231.0 698.820007 l
231.0 698.519958 l
231.0 698.700012 l
231.059998 698.519958 l
231.0 698.579956 l
231.119995 698.339966 l
230.87999 698.640015 l
231.0 698.579956 l
231.119995 698.519958 l
231.0 698.519958 l
231.179993 698.459961 l
231.0 698.519958 l
231.300003 698.519958 l
231.059998 698.459961 l
231.179993 698.519958 l
231.23999 698.519958 l
231.419998 698.579956 l
231.360001 698.579956 l
231.479996 698.640015 l
231.179993 698.339966 l
231.300003 698.579956 l
231.300003 698.519958 l
231.360001 698.700012 l
231.300003 698.519958 l
231.300003 698.640015 l
232.5 698.640015 l
232.5 698.339966 l
232.439987 698.159973 l
232.259995 697.799988 l
232.019989 697.559998 l
231.900009 697.5 l
231.779999 697.440002 l
231.600006 697.380005 l
231.720001 697.440002 l
231.600006 697.380005 l
231.300003 697.320007 l
230.819992 697.320007 l
230.639999 697.380005 l
230.580002 697.440002 l
230.459991 697.5 l
230.339996 697.559998 l
230.039993 697.799988 l
229.919998 698.039978 l
229.919998 698.159973 l
229.800003 698.519958 l
229.800003 698.820007 l
229.860001 699.059998 l
229.919998 699.179993 l
229.919998 699.119995 l
229.979996 699.299988 l
229.979996 699.359985 l
230.039993 699.47998 l
230.339996 699.779968 l
230.459991 699.839966 l
230.580002 699.900024 l
230.639999 699.900024 l
230.819992 699.959961 l
231.0 700.019958 l
231.300003 700.019958 l
231.600006 699.959961 l
231.720001 699.900024 l
231.600006 699.900024 l
231.779999 699.839966 l
231.900009 699.839966 l
232.019989 699.779968 l
232.259995 699.47998 l
232.319992 699.359985 l
232.37999 699.299988 l
232.439987 699.119995 l
232.37999 699.179993 l
232.439987 699.059998 l
232.5 698.820007 l
232.5 698.640015 l
f
n
231.300003 698.640015 m
232.5 698.640015 l
f
n
169.800003 673.679993 m
169.800003 673.799988 l
169.73999 673.97998 l
169.619995 674.219971 l
169.5 674.279968 l
169.37999 674.400024 l
169.199997 674.400024 l
169.080002 674.459961 l
168.900009 674.400024 l
168.779999 674.400024 l
168.600006 674.279968 l
168.479996 674.219971 l
168.360001 673.97998 l
168.300003 673.799988 l
168.300003 673.5 l
168.360001 673.380005 l
168.419998 673.200012 l
168.600006 673.019958 l
168.779999 672.959961 l
168.900009 672.900024 l
169.199997 672.900024 l
169.37999 672.959961 l
169.5 673.019958 l
169.679993 673.200012 l
169.73999 673.380005 l
169.800003 673.5 l
169.800003 673.679993 l
eofill
n
169.199997 673.679993 m
169.199997 673.799988 l
169.259995 673.619995 l
169.199997 673.799988 l
169.199997 673.679993 l
169.080002 673.919983 l
169.37999 673.679993 l
169.259995 673.73999 l
169.080002 673.859985 l
168.959991 673.97998 l
169.37999 673.799988 l
169.199997 673.799988 l
168.959991 673.859985 l
168.839996 673.919983 l
169.259995 673.859985 l
169.080002 673.799988 l
168.779999 673.799988 l
169.139999 673.859985 l
168.959991 673.73999 l
168.900009 673.73999 l
168.779999 673.679993 l
169.019989 673.919983 l
168.900009 673.679993 l
168.959991 673.799988 l
168.900009 673.619995 l
168.900009 673.799988 l
168.900009 673.5 l
168.839996 673.73999 l
168.900009 673.619995 l
168.959991 673.559998 l
169.019989 673.380005 l
168.839996 673.619995 l
169.019989 673.440002 l
168.779999 673.559998 l
168.959991 673.5 l
169.080002 673.5 l
169.199997 673.440002 l
168.900009 673.5 l
169.199997 673.5 l
169.019989 673.440002 l
169.199997 673.5 l
169.139999 673.5 l
169.259995 673.559998 l
169.080002 673.440002 l
169.259995 673.619995 l
169.139999 673.380005 l
169.199997 673.559998 l
169.199997 673.619995 l
169.259995 673.73999 l
169.199997 673.5 l
169.199997 673.679993 l
170.400009 673.679993 l
170.400009 673.5 l
170.339996 673.200012 l
170.279999 673.079956 l
170.339996 673.200012 l
170.279999 673.019958 l
170.100006 672.779968 l
170.039993 672.719971 l
169.919998 672.600037 l
169.800003 672.47998 l
169.679993 672.419983 l
169.559998 672.359985 l
169.37999 672.299988 l
168.900009 672.299988 l
168.660004 672.359985 l
168.539993 672.419983 l
168.600006 672.359985 l
168.419998 672.419983 l
168.179993 672.600037 l
168.059998 672.719971 l
168.0 672.779968 l
167.87999 673.019958 l
167.819992 673.200012 l
167.819992 673.079956 l
167.759995 673.200012 l
167.699997 673.5 l
167.699997 673.799988 l
167.759995 673.97998 l
167.819992 674.159973 l
167.819992 674.219971 l
167.87999 674.339966 l
167.940002 674.459961 l
168.23999 674.76001 l
168.360001 674.820007 l
168.300003 674.76001 l
168.479996 674.880005 l
168.779999 675.0 l
168.900009 675.0 l
168.720001 674.940002 l
168.900009 675.0 l
169.37999 675.0 l
169.5 674.940002 l
169.199997 675.0 l
169.37999 675.0 l
169.800003 674.820007 l
169.919998 674.700012 l
169.800003 674.820007 l
169.919998 674.76001 l
170.160004 674.459961 l
170.220001 674.339966 l
170.279999 674.219971 l
170.339996 674.159973 l
170.400009 673.97998 l
170.400009 673.679993 l
f
n
169.199997 673.679993 m
170.400009 673.679993 l
f
149.279999 717.299988 m
/N26 9.0 Tf
(c) show
153.600006 714.419983 m
/N26 6.960007 Tf
(i) show
178.139999 625.680054 m
/N27 9.960007 Tf
(a\) Full adder circuit)
[5.518837 3.359436 2.761909 6.109393 5.561665 2.235027 2.235027 2.761909 5.561665 5.518837 5.561665 
5.518837 3.340512 2.761909 5.003907 2.235027 3.340512 5.003907 5.561665 2.235027 2.792785 ] pdfxs
n
236.970001 664.73999 m
236.970001 665.339966 l
0.300003 w
S
1.0 w
n
237.119995 665.039978 m
279.599976 665.039978 l
0.599976 w
S
1.0 w
n
169.079987 693.779968 m
169.079987 694.079956 l
0.599991 w
S
1.0 w
n
169.079987 673.380005 m
169.079987 693.780029 l
0.599991 w
S
1.0 w
n
210.299988 656.640015 m
210.299988 656.940063 l
0.599991 w
S
1.0 w
n
210.299988 656.940002 m
210.299988 719.700012 l
0.599991 w
S
1.0 w
n
211.080002 707.700012 m
211.080002 707.820007 l
211.019989 708.0 l
210.959991 708.119995 l
210.839996 708.23999 l
210.720001 708.299988 l
210.600006 708.419983 l
210.479996 708.419983 l
210.300003 708.47998 l
210.119995 708.419983 l
210.0 708.419983 l
209.87999 708.299988 l
209.759995 708.23999 l
209.639999 708.119995 l
209.580002 708.0 l
209.519989 707.820007 l
209.519989 707.519958 l
209.580002 707.400024 l
209.639999 707.219971 l
209.759995 707.159973 l
209.87999 707.039978 l
210.0 706.97998 l
210.119995 706.919983 l
210.479996 706.919983 l
210.600006 706.97998 l
210.720001 707.039978 l
210.839996 707.159973 l
210.959991 707.219971 l
211.019989 707.400024 l
211.080002 707.519958 l
211.080002 707.700012 l
eofill
n
210.479996 707.700012 m
210.479996 707.820007 l
210.539993 707.640015 l
210.479996 707.820007 l
210.479996 707.700012 l
210.419998 707.820007 l
210.539993 707.700012 l
210.419998 707.820007 l
210.600006 707.700012 l
210.479996 707.76001 l
210.300003 707.880005 l
210.179993 708.0 l
210.600006 707.820007 l
210.300003 707.820007 l
210.119995 707.880005 l
210.479996 707.880005 l
210.300003 707.820007 l
210.0 707.820007 l
210.419998 708.0 l
210.179993 707.76001 l
210.059998 707.700012 l
210.179993 707.820007 l
210.059998 707.700012 l
210.179993 707.820007 l
210.119995 707.700012 l
210.179993 707.820007 l
210.119995 707.640015 l
210.119995 707.820007 l
210.119995 707.519958 l
210.059998 707.76001 l
210.119995 707.640015 l
210.179993 707.579956 l
210.23999 707.400024 l
209.940002 707.76001 l
210.059998 707.700012 l
210.179993 707.579956 l
210.300003 707.459961 l
210.179993 707.579956 l
210.419998 707.459961 l
210.119995 707.519958 l
210.479996 707.519958 l
210.23999 707.459961 l
210.479996 707.579956 l
210.300003 707.459961 l
210.419998 707.579956 l
210.600006 707.700012 l
210.720001 707.76001 l
210.419998 707.400024 l
210.479996 707.579956 l
210.479996 707.640015 l
210.539993 707.76001 l
210.479996 707.519958 l
210.479996 707.700012 l
211.679993 707.700012 l
211.679993 707.519958 l
211.619995 707.219971 l
211.559998 707.100037 l
211.619995 707.219971 l
211.559998 707.039978 l
211.259995 706.679993 l
211.139999 706.619995 l
211.259995 706.73999 l
211.019989 706.5 l
210.900009 706.440002 l
210.779999 706.380005 l
210.479996 706.320007 l
210.119995 706.320007 l
209.87999 706.380005 l
209.639999 706.5 l
209.459991 706.619995 l
209.339996 706.73999 l
209.519989 706.619995 l
209.400009 706.679993 l
209.100006 707.039978 l
209.039993 707.219971 l
209.039993 707.100037 l
208.979996 707.219971 l
208.919998 707.519958 l
208.919998 707.820007 l
208.979996 708.0 l
209.039993 708.179993 l
209.039993 708.23999 l
209.100006 708.359985 l
209.220001 708.539978 l
209.339996 708.659973 l
209.519989 708.779968 l
209.639999 708.839966 l
209.459991 708.719971 l
209.580002 708.839966 l
210.0 709.019958 l
210.119995 709.019958 l
209.940002 708.959961 l
210.119995 709.019958 l
210.479996 709.019958 l
210.659988 708.959961 l
210.479996 709.019958 l
210.600006 709.019958 l
211.019989 708.839966 l
211.139999 708.719971 l
211.019989 708.839966 l
211.139999 708.779968 l
211.37999 708.539978 l
211.5 708.359985 l
211.559998 708.23999 l
211.619995 708.179993 l
211.679993 708.0 l
211.679993 707.700012 l
f
n
210.479996 707.700012 m
211.679993 707.700012 l
f
149.279999 700.799988 m
/N26 9.0 Tf
(a) show
149.279999 671.820007 m
(b) show
283.139709 662.939697 m
(c) show
287.459991 660.0 m
/N26 6.960007 Tf
(o) show
283.139984 701.820007 m
/N26 9.0 Tf
(s) show
n
158.070007 719.100037 m
158.070007 719.700073 l
0.300003 w
S
1.0 w
n
158.220001 719.400024 m
210.600006 719.400024 l
0.600037 w
S
1.0 w
n
352.830017 700.799988 m
352.830017 701.399963 l
0.300018 w
S
1.0 w
n
334.559998 701.099976 m
352.679993 701.099976 l
0.599976 w
S
1.0 w
n
352.830017 685.799988 m
352.830017 686.399963 l
0.300018 w
S
1.0 w
n
334.559998 686.099976 m
352.679993 686.099976 l
0.599976 w
S
1.0 w
n
352.830017 670.799988 m
352.830017 671.399963 l
0.300018 w
S
1.0 w
n
334.559998 671.099976 m
352.679993 671.099976 l
0.599976 w
S
1.0 w
325.259979 700.26001 m
(c) show
329.579987 697.320007 m
/N26 6.960007 Tf
(i) show
325.259979 683.76001 m
/N26 9.0 Tf
(a) show
325.259979 668.759705 m
(b) show
n
416.309998 693.359985 m
416.309998 693.960022 l
0.299988 w
S
1.0 w
n
398.100006 693.660034 m
416.160004 693.660034 l
0.600037 w
S
1.0 w
n
416.309998 676.380005 m
416.309998 676.97998 l
0.299988 w
S
1.0 w
n
398.100006 676.679993 m
416.160004 676.679993 l
0.599976 w
S
1.0 w
420.179993 675.359985 m
(c) show
424.5 672.47998 m
/N26 6.960007 Tf
(o) show
420.179993 692.219971 m
/N26 9.0 Tf
(s) show
331.859985 625.680054 m
/N27 9.960007 Tf
(b\) Full adder symbol)
[5.567642 3.299676 2.761909 6.115369 5.567642 2.241003 2.241003 2.761909 5.567642 5.518838 5.567642 
5.567642 3.299676 2.761909 5.009883 5.009883 8.326491 5.518838 5.567642 2.241003 ] pdfxs
n
422.639984 568.350037 m
467.880005 568.350037 l
1.5 w
S
1.0 w
n
467.129974 521.940002 m
467.129974 568.380005 l
1.5 w
S
1.0 w
n
421.919983 522.690002 m
467.099976 522.690002 l
1.5 w
S
1.0 w
n
422.669983 522.719971 m
422.669983 569.099976 l
1.5 w
S
1.0 w
438.300018 542.519958 m
/N22 9.0 Tf
(FA)
[4.978798 6.472801 ] pdfxs
n
459.960022 568.080017 m
459.960022 586.440002 l
0.600006 w
S
1.0 w
n
444.960022 568.080017 m
444.960022 586.440002 l
0.600006 w
S
1.0 w
n
429.960022 568.080017 m
429.960022 586.440002 l
0.600006 w
S
1.0 w
442.619995 592.73999 m
/N26 9.0 Tf
(a) show
447.47998 589.859985 m
/N22 6.960007 Tf
(0) show
427.619995 592.73999 m
/N26 9.0 Tf
(b) show
432.47998 589.859985 m
/N22 6.960007 Tf
(0) show
n
452.580017 504.539978 m
452.580017 522.959961 l
0.600006 w
S
1.0 w
n
435.539978 509.339996 m
435.539978 522.959961 l
0.599976 w
S
1.0 w
451.139984 497.399994 m
/N26 9.0 Tf
(s) show
454.97998 494.459991 m
/N22 6.960007 Tf
(0) show
n
356.759979 568.350037 m
402.0 568.350037 l
1.5 w
S
1.0 w
n
401.25 521.940002 m
401.25 568.380005 l
1.5 w
S
1.0 w
n
356.039978 522.690002 m
401.219971 522.690002 l
1.5 w
S
1.0 w
n
356.789978 522.719971 m
356.789978 569.099976 l
1.5 w
S
1.0 w
372.419983 542.519958 m
/N22 9.0 Tf
(FA)
[4.978798 6.472801 ] pdfxs
n
394.080017 568.080017 m
394.080017 583.73999 l
0.600006 w
S
1.0 w
n
379.080017 568.080017 m
379.080017 586.440002 l
0.600006 w
S
1.0 w
n
364.080017 568.080017 m
364.080017 586.440002 l
0.600006 w
S
1.0 w
393.23999 589.619995 m
/N26 9.0 Tf
(c) show
397.619995 586.73999 m
/N22 6.960007 Tf
(1) show
376.73999 592.73999 m
/N26 9.0 Tf
(a) show
381.600006 589.859985 m
/N22 6.960007 Tf
(1) show
361.73999 592.73999 m
/N26 9.0 Tf
(b) show
366.600006 589.859985 m
/N22 6.960007 Tf
(1) show
n
386.700012 504.539978 m
386.700012 522.959961 l
0.600006 w
S
1.0 w
n
369.659973 509.339996 m
369.659973 522.959961 l
0.599976 w
S
1.0 w
385.259979 497.399994 m
/N26 9.0 Tf
(s) show
389.100006 494.459991 m
/N22 6.960007 Tf
(1) show
n
411.779968 509.339996 m
411.779968 583.73999 l
0.599976 w
S
1.0 w
n
411.47998 509.640015 m
435.839966 509.640015 l
0.600006 w
S
1.0 w
n
393.779999 583.440002 m
412.080017 583.440002 l
0.599976 w
S
1.0 w
n
290.519989 568.350037 m
335.76001 568.350037 l
1.5 w
S
1.0 w
n
335.009979 521.940002 m
335.009979 568.380005 l
1.5 w
S
1.0 w
n
289.800018 522.690002 m
334.980042 522.690002 l
1.5 w
S
1.0 w
n
290.550018 522.719971 m
290.550018 569.099976 l
1.5 w
S
1.0 w
306.179993 542.519958 m
/N22 9.0 Tf
(FA)
[4.978798 6.472801 ] pdfxs
n
327.839966 568.080017 m
327.839966 583.73999 l
0.600006 w
S
1.0 w
n
312.839966 568.080017 m
312.839966 586.440002 l
0.600006 w
S
1.0 w
n
297.840027 568.080017 m
297.840027 586.440002 l
0.600006 w
S
1.0 w
327.0 589.619995 m
/N26 9.0 Tf
(c) show
331.320007 586.73999 m
/N22 6.960007 Tf
(2) show
310.5 592.73999 m
/N26 9.0 Tf
(a) show
315.359985 589.859985 m
/N22 6.960007 Tf
(2) show
295.5 592.73999 m
/N26 9.0 Tf
(b) show
300.359985 589.859985 m
/N22 6.960007 Tf
(2) show
n
320.400024 504.539978 m
320.400024 522.959961 l
0.600006 w
S
1.0 w
n
303.419983 509.339996 m
303.419983 522.959961 l
0.600006 w
S
1.0 w
319.019989 497.399994 m
/N26 9.0 Tf
(s) show
322.859985 494.459991 m
/N22 6.960007 Tf
(2) show
n
345.539978 509.339996 m
345.539978 583.73999 l
0.600006 w
S
1.0 w
n
345.23999 509.640015 m
369.959991 509.640015 l
0.600006 w
S
1.0 w
n
327.539978 583.440002 m
345.839966 583.440002 l
0.599976 w
S
1.0 w
n
223.979996 568.350037 m
269.220001 568.350037 l
1.5 w
S
1.0 w
n
268.470001 521.940002 m
268.470001 568.380005 l
1.5 w
S
1.0 w
n
223.259995 522.690002 m
268.440002 522.690002 l
1.5 w
S
1.0 w
n
224.009995 522.719971 m
224.009995 569.099976 l
1.5 w
S
1.0 w
239.699997 542.519958 m
/N22 9.0 Tf
(FA)
[4.978798 6.472801 ] pdfxs
n
261.359985 568.080017 m
261.359985 583.73999 l
0.600006 w
S
1.0 w
n
246.360001 568.080017 m
246.360001 586.440002 l
0.600006 w
S
1.0 w
n
231.359985 568.080017 m
231.359985 586.440002 l
0.599991 w
S
1.0 w
260.519989 589.619995 m
/N26 9.0 Tf
(c) show
264.839996 586.73999 m
/N22 6.960007 Tf
(3) show
244.019989 592.73999 m
/N26 9.0 Tf
(a) show
248.819992 589.859985 m
/N22 6.960007 Tf
(3) show
229.019989 592.73999 m
/N26 9.0 Tf
(b) show
233.819992 589.859985 m
/N22 6.960007 Tf
(3) show
n
253.919998 504.539978 m
253.919998 522.959961 l
0.600006 w
S
1.0 w
n
236.940002 504.539978 m
236.940002 522.959961 l
0.600006 w
S
1.0 w
252.479996 497.399994 m
/N26 9.0 Tf
(s) show
256.320007 494.459991 m
/N22 6.960007 Tf
(3) show
n
279.059998 509.339996 m
279.059998 583.73999 l
0.600006 w
S
1.0 w
n
278.759979 509.640015 m
303.719971 509.640015 l
0.600006 w
S
1.0 w
n
261.059998 583.440002 m
279.359985 583.440002 l
0.599976 w
S
1.0 w
231.779999 497.399994 m
/N26 9.0 Tf
(c) show
236.100006 494.459991 m
/N22 6.960007 Tf
(out)
[3.480003 3.480003 1.934881 ] pdfxs
267.540009 474.47998 m
/N27 9.960007 Tf
(d\) Four-bit ripple-carry adder circuit)
[5.518838 3.359436 2.761909 6.108397 5.518838 5.560669 3.339516 3.299676 5.578598 2.234031 2.791789 
2.761909 3.339516 2.234031 5.518838 5.578598 2.234031 5.518838 3.339516 5.002912 5.560669 3.299676 
3.339516 5.002912 2.761909 5.560669 5.560669 5.518838 5.560669 3.299676 2.821669 5.002912 2.234031 
3.299676 5.039764 5.518838 2.218095 2.791789 ] pdfxs
457.259979 592.73999 m
/N26 9.0 Tf
(c) show
461.579987 589.859985 m
/N22 6.960007 Tf
(in)
[1.981513 3.526635 ] pdfxs
n
109.919998 584.819946 m
173.940002 584.819946 l
0.599976 w
S
1.0 w
n
150.839996 499.859985 m
150.839996 599.820007 l
0.600006 w
S
1.0 w
119.820007 574.97998 m
/N22 9.0 Tf
(0) show
119.820007 565.079956 m
(0) show
94.259995 474.47998 m
/N27 9.960007 Tf
(c\) Full adder truth table)
[5.011875 3.299676 2.821669 6.061585 5.578597 2.242995 2.242995 2.761909 5.569633 5.518837 5.569633 
5.569633 3.299676 2.761909 2.800753 3.299676 5.569633 2.800753 5.569633 2.761909 2.800753 5.569633 
5.569633 2.242995 5.569633 ] pdfxs
129.959991 591.47998 m
/N26 9.0 Tf
(ac)
[8.8803 8.376302 ] pdfxs
143.220001 588.600037 m
/N26 6.960007 Tf
(i) show
119.339996 591.47998 m
/N26 9.0 Tf
(b) show
130.439697 574.980286 m
/N22 9.0 Tf
(00)
[9.7803 9.7803 ] pdfxs
130.439697 565.080261 m
(01)
[9.7803 9.7803 ] pdfxs
119.819702 554.460266 m
(0) show
119.819702 544.620544 m
(0) show
130.439697 554.460266 m
(10)
[9.7803 9.7803 ] pdfxs
130.439697 544.620544 m
(11)
[9.7803 9.7803 ] pdfxs
119.819702 534.000549 m
(100)
[10.620001 9.780301 10.620001 ] pdfxs
119.819702 522.960266 m
(1) show
119.819702 513.120544 m
(1) show
130.439697 522.960266 m
(01)
[9.7803 9.7803 ] pdfxs
130.439697 513.120544 m
(10)
[9.7803 9.7803 ] pdfxs
119.819702 502.500549 m
(111)
[10.620001 9.780301 10.620001 ] pdfxs
161.819992 573.720276 m
(0) show
161.819992 563.880554 m
(0) show
172.439987 590.280273 m
/N26 9.0 Tf
(s) show
159.659988 590.280273 m
(c) show
163.979996 587.339966 m
/N26 6.960007 Tf
(o) show
172.440002 573.719971 m
/N22 9.0 Tf
(0) show
172.440002 563.880249 m
(1) show
161.820007 553.260254 m
(0) show
161.820007 543.360229 m
(1) show
172.440002 553.260254 m
(1) show
172.440002 543.360229 m
(0) show
161.820007 532.740234 m
(01)
[10.620001 10.620001 ] pdfxs
161.820007 521.760254 m
(1) show
161.820007 511.86026 m
(1) show
172.440002 521.760254 m
(0) show
172.440002 511.86026 m
(0) show
161.820007 501.240265 m
(11)
[10.620001 10.620001 ] pdfxs
n
452.579987 512.640015 m
454.200012 512.640015 l
454.079987 512.039978 l
453.059998 507.119995 l
452.039978 507.119995 l
450.959991 512.039978 l
450.839996 512.640015 l
451.5 512.640015 l
451.97998 512.279968 l
453.059998 507.359985 l
452.039978 507.300018 l
453.059998 512.219971 l
454.079987 512.039978 l
453.600006 511.619995 l
452.579987 511.619995 l
f
n
452.040009 511.619995 m
452.040009 512.640015 l
1.080002 w
S
1.0 w
n
452.579987 512.159973 m
453.600006 512.159973 l
452.579987 507.23999 l
451.5 512.159973 l
eofill
n
452.580017 512.400024 m
452.580017 512.700012 l
0.600006 w
S
1.0 w
n
452.580017 512.700012 m
452.580017 522.0 l
0.600006 w
S
1.0 w
n
452.580017 504.539978 m
452.580017 504.839966 l
0.600006 w
S
1.0 w
n
452.580017 504.839996 m
452.580017 522.959961 l
0.600006 w
S
1.0 w
n
253.919998 512.640015 m
255.539993 512.640015 l
255.419998 512.039978 l
254.400009 507.119995 l
253.37999 507.119995 l
252.360001 512.039978 l
252.23999 512.640015 l
252.900009 512.640015 l
253.37999 512.219971 l
254.400009 507.300018 l
253.37999 507.300018 l
254.400009 512.219971 l
255.419998 512.039978 l
254.939987 511.619995 l
253.919998 511.619995 l
f
n
253.410004 511.619995 m
253.410004 512.640015 l
1.020004 w
S
1.0 w
n
253.919998 512.159973 m
254.939987 512.159973 l
253.919998 507.23999 l
252.900009 512.159973 l
eofill
n
253.919998 512.400024 m
253.919998 512.700012 l
0.600006 w
S
1.0 w
n
253.919998 512.700012 m
253.919998 522.0 l
0.600006 w
S
1.0 w
n
253.919998 504.539978 m
253.919998 504.839966 l
0.600006 w
S
1.0 w
n
253.919998 504.839996 m
253.919998 522.959961 l
0.600006 w
S
1.0 w
n
320.399994 512.640015 m
322.079987 512.640015 l
321.959991 512.039978 l
320.880005 507.119995 l
319.859985 507.119995 l
318.839996 512.039978 l
318.720001 512.640015 l
319.380005 512.640015 l
319.859985 512.219971 l
320.880005 507.300018 l
319.859985 507.359985 l
320.940002 512.279968 l
321.959991 512.039978 l
321.47998 511.619995 l
320.399994 511.619995 l
f
n
319.890015 511.619995 m
319.890015 512.640015 l
1.020004 w
S
1.0 w
n
320.399994 512.159973 m
321.47998 512.159973 l
320.399994 507.23999 l
319.380005 512.159973 l
eofill
n
320.400024 512.400024 m
320.400024 512.700012 l
0.600006 w
S
1.0 w
n
320.400024 512.700012 m
320.400024 522.0 l
0.600006 w
S
1.0 w
n
320.400024 504.539978 m
320.400024 504.839966 l
0.600006 w
S
1.0 w
n
320.400024 504.839996 m
320.400024 522.959961 l
0.600006 w
S
1.0 w
n
386.700012 512.640015 m
388.319977 512.640015 l
388.200012 512.039978 l
387.179993 507.119995 l
386.160004 507.119995 l
385.079987 512.039978 l
384.959991 512.640015 l
385.619995 512.640015 l
386.100006 512.279968 l
387.179993 507.359985 l
386.160004 507.300018 l
387.179993 512.219971 l
388.200012 512.039978 l
387.720001 511.619995 l
386.700012 511.619995 l
f
n
386.160004 511.619995 m
386.160004 512.640015 l
1.080002 w
S
1.0 w
n
386.700012 512.159973 m
387.720001 512.159973 l
386.700012 507.23999 l
385.619995 512.159973 l
eofill
n
386.700012 512.400024 m
386.700012 512.700012 l
0.600006 w
S
1.0 w
n
386.700012 512.700012 m
386.700012 522.0 l
0.600006 w
S
1.0 w
n
386.700012 504.539978 m
386.700012 504.839966 l
0.600006 w
S
1.0 w
n
386.700012 504.839996 m
386.700012 522.959961 l
0.600006 w
S
1.0 w
n
459.959991 576.179993 m
461.639984 576.179993 l
461.519989 575.580017 l
460.440002 570.659973 l
459.419983 570.659973 l
458.399994 575.580017 l
458.279999 576.179993 l
458.940002 576.179993 l
459.419983 575.76001 l
460.440002 570.839966 l
459.419983 570.900024 l
460.5 575.820007 l
461.519989 575.580017 l
461.039978 575.159973 l
459.959991 575.159973 l
f
n
459.450012 575.159973 m
459.450012 576.179993 l
1.020004 w
S
1.0 w
n
459.959991 575.700012 m
461.039978 575.700012 l
459.959991 570.779968 l
458.940002 575.700012 l
eofill
n
459.960022 575.880005 m
459.960022 576.180054 l
0.600006 w
S
1.0 w
n
459.960022 576.179993 m
459.960022 585.47998 l
0.600006 w
S
1.0 w
n
459.960022 568.080017 m
459.960022 568.380005 l
0.600006 w
S
1.0 w
n
459.960022 568.380005 m
459.960022 586.440002 l
0.600006 w
S
1.0 w
n
429.959991 576.179993 m
431.639984 576.179993 l
431.519989 575.580017 l
430.440002 570.659973 l
429.419983 570.659973 l
428.399994 575.580017 l
428.279999 576.179993 l
428.940002 576.179993 l
429.419983 575.76001 l
430.440002 570.839966 l
429.419983 570.900024 l
430.5 575.820007 l
431.519989 575.580017 l
431.039978 575.159973 l
429.959991 575.159973 l
f
n
429.450012 575.159973 m
429.450012 576.179993 l
1.020004 w
S
1.0 w
n
429.959991 575.700012 m
431.039978 575.700012 l
429.959991 570.779968 l
428.940002 575.700012 l
eofill
n
429.960022 575.880005 m
429.960022 576.180054 l
0.600006 w
S
1.0 w
n
429.960022 576.179993 m
429.960022 585.47998 l
0.600006 w
S
1.0 w
n
429.960022 568.080017 m
429.960022 568.380005 l
0.600006 w
S
1.0 w
n
429.960022 568.380005 m
429.960022 586.440002 l
0.600006 w
S
1.0 w
n
246.360001 576.179993 m
247.979996 576.179993 l
247.860001 575.580017 l
246.839996 570.659973 l
245.819992 570.659973 l
244.73999 575.580017 l
244.619995 576.179993 l
245.279999 576.179993 l
245.759995 575.820007 l
246.839996 570.900024 l
245.819992 570.839966 l
246.839996 575.76001 l
247.860001 575.580017 l
247.37999 575.159973 l
246.360001 575.159973 l
f
n
245.820007 575.159973 m
245.820007 576.179993 l
1.080002 w
S
1.0 w
n
246.360001 575.700012 m
247.37999 575.700012 l
246.360001 570.779968 l
245.279999 575.700012 l
eofill
n
246.360001 575.880005 m
246.360001 576.180054 l
0.600006 w
S
1.0 w
n
246.360001 576.179993 m
246.360001 585.47998 l
0.600006 w
S
1.0 w
n
246.360001 568.080017 m
246.360001 568.380005 l
0.600006 w
S
1.0 w
n
246.360001 568.380005 m
246.360001 586.440002 l
0.600006 w
S
1.0 w
n
231.360001 576.179993 m
232.979996 576.179993 l
232.860001 575.580017 l
231.839996 570.659973 l
230.819992 570.659973 l
229.73999 575.580017 l
229.619995 576.179993 l
230.279999 576.179993 l
230.759995 575.820007 l
231.839996 570.900024 l
230.819992 570.839966 l
231.839996 575.76001 l
232.860001 575.580017 l
232.37999 575.159973 l
231.360001 575.159973 l
f
n
230.820007 575.159973 m
230.820007 576.179993 l
1.080002 w
S
1.0 w
n
231.360001 575.700012 m
232.37999 575.700012 l
231.360001 570.779968 l
230.279999 575.700012 l
eofill
n
231.359985 575.880005 m
231.359985 576.180054 l
0.599991 w
S
1.0 w
n
231.359985 576.179993 m
231.359985 585.47998 l
0.599991 w
S
1.0 w
n
231.359985 568.080017 m
231.359985 568.380005 l
0.599991 w
S
1.0 w
n
231.359985 568.380005 m
231.359985 586.440002 l
0.599991 w
S
1.0 w
n
297.839996 576.179993 m
299.519989 576.179993 l
299.399994 575.580017 l
298.320007 570.659973 l
297.300018 570.659973 l
296.279999 575.580017 l
296.160004 576.179993 l
296.820007 576.179993 l
297.300018 575.76001 l
298.320007 570.839966 l
297.300018 570.900024 l
298.380005 575.820007 l
299.399994 575.580017 l
298.919983 575.159973 l
297.839996 575.159973 l
f
n
297.330017 575.159973 m
297.330017 576.179993 l
1.020004 w
S
1.0 w
n
297.839996 575.700012 m
298.919983 575.700012 l
297.839996 570.779968 l
296.820007 575.700012 l
eofill
n
297.840027 575.880005 m
297.840027 576.180054 l
0.600006 w
S
1.0 w
n
297.840027 576.179993 m
297.840027 585.47998 l
0.600006 w
S
1.0 w
n
297.840027 568.080017 m
297.840027 568.380005 l
0.600006 w
S
1.0 w
n
297.840027 568.380005 m
297.840027 586.440002 l
0.600006 w
S
1.0 w
n
312.839996 576.179993 m
314.519989 576.179993 l
314.399994 575.580017 l
313.320007 570.659973 l
312.300018 570.659973 l
311.279999 575.580017 l
311.160004 576.179993 l
311.820007 576.179993 l
312.300018 575.76001 l
313.320007 570.839966 l
312.300018 570.900024 l
313.380005 575.820007 l
314.399994 575.580017 l
313.919983 575.159973 l
312.839996 575.159973 l
f
n
312.330017 575.159973 m
312.330017 576.179993 l
1.020004 w
S
1.0 w
n
312.839996 575.700012 m
313.919983 575.700012 l
312.839996 570.779968 l
311.820007 575.700012 l
eofill
n
312.839966 575.880005 m
312.839966 576.180054 l
0.600006 w
S
1.0 w
n
312.839966 576.179993 m
312.839966 585.47998 l
0.600006 w
S
1.0 w
n
312.839966 568.080017 m
312.839966 568.380005 l
0.600006 w
S
1.0 w
n
312.839966 568.380005 m
312.839966 586.440002 l
0.600006 w
S
1.0 w
n
364.079987 576.179993 m
365.759979 576.179993 l
365.639984 575.580017 l
364.559998 570.659973 l
363.539978 570.659973 l
362.519989 575.580017 l
362.399994 576.179993 l
363.059998 576.179993 l
363.539978 575.76001 l
364.559998 570.839966 l
363.539978 570.900024 l
364.619995 575.820007 l
365.639984 575.580017 l
365.160004 575.159973 l
364.079987 575.159973 l
f
n
363.570007 575.159973 m
363.570007 576.179993 l
1.020004 w
S
1.0 w
n
364.079987 575.700012 m
365.160004 575.700012 l
364.079987 570.779968 l
363.059998 575.700012 l
eofill
n
364.080017 575.880005 m
364.080017 576.180054 l
0.600006 w
S
1.0 w
n
364.080017 576.179993 m
364.080017 585.47998 l
0.600006 w
S
1.0 w
n
364.080017 568.080017 m
364.080017 568.380005 l
0.600006 w
S
1.0 w
n
364.080017 568.380005 m
364.080017 586.440002 l
0.600006 w
S
1.0 w
n
379.079987 576.179993 m
380.759979 576.179993 l
380.639984 575.580017 l
379.559998 570.659973 l
378.539978 570.659973 l
377.519989 575.580017 l
377.399994 576.179993 l
378.059998 576.179993 l
378.539978 575.76001 l
379.559998 570.839966 l
378.539978 570.900024 l
379.619995 575.820007 l
380.639984 575.580017 l
380.160004 575.159973 l
379.079987 575.159973 l
f
n
378.570007 575.159973 m
378.570007 576.179993 l
1.020004 w
S
1.0 w
n
379.079987 575.700012 m
380.160004 575.700012 l
379.079987 570.779968 l
378.059998 575.700012 l
eofill
n
379.080017 575.880005 m
379.080017 576.180054 l
0.600006 w
S
1.0 w
n
379.080017 576.179993 m
379.080017 585.47998 l
0.600006 w
S
1.0 w
n
379.080017 568.080017 m
379.080017 568.380005 l
0.600006 w
S
1.0 w
n
379.080017 568.380005 m
379.080017 586.440002 l
0.600006 w
S
1.0 w
n
444.959991 576.179993 m
446.639984 576.179993 l
446.519989 575.580017 l
445.440002 570.659973 l
444.419983 570.659973 l
443.399994 575.580017 l
443.279999 576.179993 l
443.940002 576.179993 l
444.419983 575.76001 l
445.440002 570.839966 l
444.419983 570.900024 l
445.5 575.820007 l
446.519989 575.580017 l
446.039978 575.159973 l
444.959991 575.159973 l
f
n
444.450012 575.159973 m
444.450012 576.179993 l
1.020004 w
S
1.0 w
n
444.959991 575.700012 m
446.039978 575.700012 l
444.959991 570.779968 l
443.940002 575.700012 l
eofill
n
444.960022 575.880005 m
444.960022 576.180054 l
0.600006 w
S
1.0 w
n
444.960022 576.179993 m
444.960022 585.47998 l
0.600006 w
S
1.0 w
n
444.960022 568.080017 m
444.960022 568.380005 l
0.600006 w
S
1.0 w
n
444.960022 568.380005 m
444.960022 586.440002 l
0.600006 w
S
1.0 w
n
261.359985 576.179993 m
262.97998 576.179993 l
262.859985 575.580017 l
261.839996 570.659973 l
260.820007 570.659973 l
259.73999 575.580017 l
259.619995 576.179993 l
260.279999 576.179993 l
260.759979 575.820007 l
261.839996 570.900024 l
260.820007 570.839966 l
261.839996 575.76001 l
262.859985 575.580017 l
262.380005 575.159973 l
261.359985 575.159973 l
f
n
260.820007 575.159973 m
260.820007 576.179993 l
1.080002 w
S
1.0 w
n
261.359985 575.700012 m
262.380005 575.700012 l
261.359985 570.779968 l
260.279999 575.700012 l
eofill
n
261.359985 575.880005 m
261.359985 576.180054 l
0.600006 w
S
1.0 w
n
261.359985 576.179993 m
261.359985 579.059998 l
0.600006 w
S
1.0 w
n
261.359985 568.080017 m
261.359985 568.380005 l
0.600006 w
S
1.0 w
n
261.359985 568.380005 m
261.359985 583.73999 l
0.600006 w
S
1.0 w
n
327.839996 576.179993 m
329.519989 576.179993 l
329.399994 575.580017 l
328.320007 570.659973 l
327.300018 570.659973 l
326.279999 575.580017 l
326.160004 576.179993 l
326.820007 576.179993 l
327.300018 575.76001 l
328.320007 570.839966 l
327.300018 570.900024 l
328.380005 575.820007 l
329.399994 575.580017 l
328.919983 575.159973 l
327.839996 575.159973 l
f
n
327.330017 575.159973 m
327.330017 576.179993 l
1.020004 w
S
1.0 w
n
327.839996 575.700012 m
328.919983 575.700012 l
327.839996 570.779968 l
326.820007 575.700012 l
eofill
n
327.839966 575.880005 m
327.839966 576.180054 l
0.600006 w
S
1.0 w
n
327.839966 576.179993 m
327.839966 579.059998 l
0.600006 w
S
1.0 w
n
327.839966 568.080017 m
327.839966 568.380005 l
0.600006 w
S
1.0 w
n
327.839966 568.380005 m
327.839966 583.73999 l
0.600006 w
S
1.0 w
n
394.079987 576.179993 m
395.759979 576.179993 l
395.639984 575.580017 l
394.559998 570.659973 l
393.539978 570.659973 l
392.519989 575.580017 l
392.399994 576.179993 l
393.059998 576.179993 l
393.539978 575.76001 l
394.559998 570.839966 l
393.539978 570.900024 l
394.619995 575.820007 l
395.639984 575.580017 l
395.160004 575.159973 l
394.079987 575.159973 l
f
n
393.570007 575.159973 m
393.570007 576.179993 l
1.020004 w
S
1.0 w
n
394.079987 575.700012 m
395.160004 575.700012 l
394.079987 570.779968 l
393.059998 575.700012 l
eofill
n
394.080017 575.880005 m
394.080017 576.180054 l
0.600006 w
S
1.0 w
n
394.080017 576.179993 m
394.080017 579.059998 l
0.600006 w
S
1.0 w
n
394.080017 568.080017 m
394.080017 568.380005 l
0.600006 w
S
1.0 w
n
394.080017 568.380005 m
394.080017 583.73999 l
0.600006 w
S
1.0 w
n
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%DocumentNeededResources:
%%+ font TimesNewRomanPS-ItalicMT
%%+ font TimesNewRomanPSMT
%%+ font ArialMT
%%EOF
